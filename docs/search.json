[
  {
    "objectID": "posts/Fourth Post Assignment /index.html",
    "href": "posts/Fourth Post Assignment /index.html",
    "title": "Fourth Blog POST",
    "section": "",
    "text": "Hey everyone, Welcome back to my blog post !\nToday I will be showing you all how to import data and make it visible\nLet’s Get Started!"
  },
  {
    "objectID": "posts/Fourth Post /index.html",
    "href": "posts/Fourth Post /index.html",
    "title": "Fourth Blog Post",
    "section": "",
    "text": "Hello Welcome to My Fourth Assignment\nToday I will be teaching you how to use data and visualize it using the exercises given to us in the textbook .\n\nDatatypes\nData types by definition are data represented by an object; Examples included integers, double, character, logical and complex (numbers with real and imaginary parts). Additionally these numbers can integers and doubles (numeric).\nIntegers are : 2,3,4\nDoubles are : 12,15,19\nCharacters are:\nCharacters are text that can be shown as a string (must be enclosed by quotation marks)\nFor example\n\ntypeof(\"cheese\")\n\n[1] \"character\"\n\n#|eval:true \n#|echo:true\n\nThis works with integers as well (if an integer has quotation marks surrounding it , it is then considered a character), see example below\n\ntypeof(\"1\")\n\n[1] \"character\"\n\ntypeof(\"4\")\n\n[1] \"character\"\n\n#|eval:true \n#|echo:true\n\nLogical statements are :\nLogical statements are True and False , they are also referred to as Boolean. See the example below.\nWhen using the as.logical function , 0 represents the false value and the 1 value represents the true value. See the example below\n\nrandomdance<-list(\n  words=\"shake\",\"my\",\"foot\"\n)\n\nrandomdance=as.logical(0)  #Set random dance list to false values \n  \nstr(randomdance)          #call random dance using str and output value \n\n logi FALSE\n\nrandomdance=as.logical(1)  #Set random dance list to true value \n\nstr(randomdance)         #call random dance using str and output true value\n\n logi TRUE\n\n#|eval:true \n#|echo:true\n\n\n\n\nTidy data\nTidy data is a format that organizes data in a specific structure.\nEach column represents a variable\nEach row represents an observation\nEach cell represents a value\nI will display this using the exercises from the text book\nHint: Remember to load dyplr and set eval & echo to true to display the code and output ( you should’ve learned this from my week 3 blog)\n\n#Load all of the packages using the library function\n\nlibrary(tidyverse) \n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.0     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.1     ✔ tibble    3.2.0\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.1     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the \u001b]8;;http://conflicted.r-lib.org/\u0007conflicted package\u001b]8;;\u0007 to force all conflicts to become errors\n\nlibrary(patchwork) \nlibrary(ggthemes)  \nlibrary(lubridate) \nlibrary(knitr)\nlibrary(kableExtra)\n\n\nAttaching package: 'kableExtra'\n\nThe following object is masked from 'package:dplyr':\n\n    group_rows\n\n\n1) Read in the data set\n\n#Read in the data set for the exercise and save it to the survey_data\n\nsurvey_data <- read_csv(\"https://psyteachr.github.io/ads-v2/data/survey_data.csv\")\n\nRows: 707 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (3): caller_id, employee_id, issue_category\ndbl  (3): wait_time, call_time, satisfaction\ndttm (1): call_start\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n#|eval:true\n#|echo:false\n\n2)View the top of the data set\n\n#See what the data looks like using head function \n\nhead(survey_data)\n\n# A tibble: 6 × 7\n  caller_id employee_id call_start          wait_time call_time issue_…¹ satis…²\n  <chr>     <chr>       <dttm>                  <dbl>     <dbl> <chr>      <dbl>\n1 C001      E01         2020-09-22 10:47:54       169        34 tech           3\n2 C002      E01         2020-09-07 22:10:25       206        52 tech           2\n3 C003      E01         2020-07-06 12:08:59       207        41 tech           2\n4 C004      E01         2020-02-20 13:12:03       132        16 tech           4\n5 C005      E01         2020-11-08 17:42:10       178        20 returns        3\n6 C006      E01         2020-06-01 19:06:12       230        46 returns        2\n# … with abbreviated variable names ¹​issue_category, ²​satisfaction\n\n#This would be considered a tidy data because each column represents a variable, rows are observation and each cell is a value.\n#|eval:true\n#|echo:true\n\n3)Change the column type, make data more concise\n\n#Change column types \n\nsurvey_col_types <- cols(\n  caller_id = col_character(),\n  employee_id = col_character(),\n  call_start = col_datetime(format = \"\"),\n  wait_time = col_double(),\n  call_time = col_double(),\n  issue_category = col_factor(levels = c(\"tech\", \"sales\", \"returns\", \"other\")), #Update this column to make the issue clear to viewers \n  satisfaction = col_integer()\n)\n\n# We have to re-import the data because it is updated \nsurvey_data <- read_csv(\"https://psyteachr.github.io/ads-v2/data/survey_data.csv\",\n                        col_types = survey_col_types)\n\n\n#Call the head of the graph and use the spec function to view updated column types \n\nspec(survey_data)   #Using spec() function to see column types \n\ncols(\n  caller_id = col_character(),\n  employee_id = col_character(),\n  call_start = col_datetime(format = \"\"),\n  wait_time = col_double(),\n  call_time = col_double(),\n  issue_category = col_factor(levels = c(\"tech\", \"sales\", \"returns\", \"other\"), ordered = FALSE, include_na = FALSE),\n  satisfaction = col_integer()\n)\n\nhead(survey_data)   #Using head function to view the changes \n\n# A tibble: 6 × 7\n  caller_id employee_id call_start          wait_time call_time issue_…¹ satis…²\n  <chr>     <chr>       <dttm>                  <dbl>     <dbl> <fct>      <int>\n1 C001      E01         2020-09-22 10:47:54       169        34 tech           3\n2 C002      E01         2020-09-07 22:10:25       206        52 tech           2\n3 C003      E01         2020-07-06 12:08:59       207        41 tech           2\n4 C004      E01         2020-02-20 13:12:03       132        16 tech           4\n5 C005      E01         2020-11-08 17:42:10       178        20 returns        3\n6 C006      E01         2020-06-01 19:06:12       230        46 returns        2\n# … with abbreviated variable names ¹​issue_category, ²​satisfaction\n\n#|eval:true\n#|echo:true\n\nNow that I have the updated columns and the table is in the correct format , I can now make a gg plot.\n\n\n\nGG Plot\n\n#Call ggplot to get blank canvas \nggplot()\n\n\n\n#Edit GG plot to add details to the graph \n\n#Aesthetics used to add axis titles to the graph \n\nggplot(survey_data, aes(x = issue_category,fill=issue_category)) +\n  geom_bar()\n\n\n\n#|eval:true\n#|echo:true\n\nThis is a basic plot demonstrating the amount of issues that the customers had. I can conclude that the customers had the most issues with technology amongst other problems\nCheck out my Blog 5 for more complex graphs.\nBye for now !"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Alexus Quarto blog (Assignment 1)",
    "section": "",
    "text": "Midterm 1\n\n\n\n\n\n\n\nnews\n\n\ncode\n\n\nanalysis\n\n\n\n\n\n\n\n\n\n\n\nApr 13, 2023\n\n\nAlexus Lawrence\n\n\n\n\n\n\n  \n\n\n\n\nWeek 6 Data Summaries\n\n\n\n\n\n\n\nnews\n\n\ncode\n\n\nanalysis\n\n\n\n\n\n\n\n\n\n\n\nApr 13, 2023\n\n\nAlexus Lawrence\n\n\n\n\n\n\n  \n\n\n\n\nWeek 10 Data Post\n\n\n\n\n\n\n\nnews\n\n\ncode\n\n\nanalysis\n\n\n\n\n\n\n\n\n\n\n\nApr 13, 2023\n\n\nAlexus Lawrence\n\n\n\n\n\n\n  \n\n\n\n\nFifth Blog Post\n\n\n\n\n\n\n\nnews\n\n\ncode\n\n\nanalysis\n\n\n\n\n\n\n\n\n\n\n\nMar 29, 2023\n\n\nAlexus Lawrence\n\n\n\n\n\n\n  \n\n\n\n\nFourth Blog Post\n\n\n\n\n\n\n\nnews\n\n\ncode\n\n\nanalysis\n\n\n\n\n\n\n\n\n\n\n\nMar 29, 2023\n\n\nAlexus Lawrence\n\n\n\n\n\n\n  \n\n\n\n\nThird Blog Post\n\n\n\n\n\n\n\nnews\n\n\ncode\n\n\nanalysis\n\n\n\n\n\n\n\n\n\n\n\nMar 26, 2023\n\n\nAlexus Lawrence\n\n\n\n\n\n\n  \n\n\n\n\nThird Blog Post\n\n\n\n\n\n\n\nnews\n\n\ncode\n\n\nanalysis\n\n\n\n\n\n\n\n\n\n\n\nMar 2, 2023\n\n\nAlexus Lawrence\n\n\n\n\n\n\n  \n\n\n\n\nSecond Blog Post\n\n\n\n\n\n\n\nnews\n\n\ncode\n\n\nanalysis\n\n\n\n\n\n\n\n\n\n\n\nFeb 14, 2023\n\n\nAlexus Lawrence\n\n\n\n\n\n\n  \n\n\n\n\nFirst Blog Post\n\n\n\n\n\n\n\nnews\n\n\ncode\n\n\nanalysis\n\n\n\n\n\n\n\n\n\n\n\nFeb 6, 2023\n\n\nAlexus Lawrence\n\n\n\n\n\n\n  \n\n\n\n\nWelcome To My Blog\n\n\n\n\n\n\n\nnews\n\n\n\n\n\n\n\n\n\n\n\nFeb 3, 2023\n\n\nTristan O’Malley\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/Fourth Post /index.html#datatypes",
    "href": "posts/Fourth Post /index.html#datatypes",
    "title": "Fourth Blog Post",
    "section": "Datatypes",
    "text": "Datatypes\nData types by definition are data represented by an object; Examples included integers, double, character, logical and complex (numbers with real and imaginary parts). Additionally these numbers can integers and doubles (numeric).\nIntegers are : 2,3,4\nDoubles are : 12,15,19\nCharacters are:\nCharacters are text that can be shown as a string (must be enclosed by quotation marks)\nFor example\n\ntypeof(\"cheese\")\n\n[1] \"character\"\n\n#|eval:true \n#|echo:true\n\nThis works with integers as well (if an integer has quotation marks surrounding it , it is then considered a character), see example below\n\ntypeof(\"1\")\n\n[1] \"character\"\n\ntypeof(\"4\")\n\n[1] \"character\"\n\n#|eval:true \n#|echo:true\n\nLogical statements are :\nLogical statements are True and False , they are also referred to as Boolean. See the example below.\nWhen using the as.logical function , 0 represents the false value and the 1 value represents the true value. See the example below\n\nrandomdance<-list(\n  words=\"shake\",\"my\",\"foot\"\n)\n\nrandomdance=as.logical(0)  #Set random dance list to false values \n  \nstr(randomdance)          #call random dance using str and output value \n\n logi FALSE\n\nrandomdance=as.logical(1)  #Set random dance list to true value \n\nstr(randomdance)         #call random dance using str and output true value\n\n logi TRUE\n\n#|eval:true \n#|echo:true"
  },
  {
    "objectID": "posts/Fourth Post /index.html#tidy-data",
    "href": "posts/Fourth Post /index.html#tidy-data",
    "title": "Fourth Blog Post",
    "section": "Tidy data",
    "text": "Tidy data\nTidy data is a format that organizes data in a specific structure.\nEach column represents a variable\nEach row represents an observation\nEach cell represents a value\nI will display this using the exercises from the text book\nHint: Remember to load dyplr and set eval & echo to true to display the code and output ( you should’ve learned this from my week 3 blog)\n\n#Load all of the packages using the library function\n\nlibrary(tidyverse) \n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.0     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.1     ✔ tibble    3.2.0\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.1     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the \u001b]8;;http://conflicted.r-lib.org/\u0007conflicted package\u001b]8;;\u0007 to force all conflicts to become errors\n\nlibrary(patchwork) \nlibrary(ggthemes)  \nlibrary(lubridate) \nlibrary(knitr)\nlibrary(kableExtra)\n\n\nAttaching package: 'kableExtra'\n\nThe following object is masked from 'package:dplyr':\n\n    group_rows\n\n\nRead in the data set\n\n#Read in the data set for the exercise and save it to the survey_data\n\nsurvey_data <- read_csv(\"https://psyteachr.github.io/ads-v2/data/survey_data.csv\")\n\nRows: 707 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (3): caller_id, employee_id, issue_category\ndbl  (3): wait_time, call_time, satisfaction\ndttm (1): call_start\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n#See what the data looks like using head function \n\nhead(survey_data)\n\n# A tibble: 6 × 7\n  caller_id employee_id call_start          wait_time call_time issue_…¹ satis…²\n  <chr>     <chr>       <dttm>                  <dbl>     <dbl> <chr>      <dbl>\n1 C001      E01         2020-09-22 10:47:54       169        34 tech           3\n2 C002      E01         2020-09-07 22:10:25       206        52 tech           2\n3 C003      E01         2020-07-06 12:08:59       207        41 tech           2\n4 C004      E01         2020-02-20 13:12:03       132        16 tech           4\n5 C005      E01         2020-11-08 17:42:10       178        20 returns        3\n6 C006      E01         2020-06-01 19:06:12       230        46 returns        2\n# … with abbreviated variable names ¹​issue_category, ²​satisfaction\n\n#This would be considered a tidy data because each column represents a variable, rows are observation and each cell is a value.\n#|eval:true\n#|echo:true\n\n\n#Change column types \n\nsurvey_col_types <- cols(\n  caller_id = col_character(),\n  employee_id = col_character(),\n  call_start = col_datetime(format = \"\"),\n  wait_time = col_double(),\n  call_time = col_double(),\n  issue_category = col_factor(levels = c(\"tech\", \"sales\", \"returns\", \"other\")), #Update this column to make the issue clear to viewers \n  satisfaction = col_integer()\n)\n\n# We have to re-import the data because it is updated \nsurvey_data <- read_csv(\"https://psyteachr.github.io/ads-v2/data/survey_data.csv\",\n                        col_types = survey_col_types)\n\n\n#Call the head of the graph and use the spec function to view updated column types \n\nspec(survey_data)   #Using spec() function to see column types \n\ncols(\n  caller_id = col_character(),\n  employee_id = col_character(),\n  call_start = col_datetime(format = \"\"),\n  wait_time = col_double(),\n  call_time = col_double(),\n  issue_category = col_factor(levels = c(\"tech\", \"sales\", \"returns\", \"other\"), ordered = FALSE, include_na = FALSE),\n  satisfaction = col_integer()\n)\n\nhead(survey_data)   #Using head function to view the changes \n\n# A tibble: 6 × 7\n  caller_id employee_id call_start          wait_time call_time issue_…¹ satis…²\n  <chr>     <chr>       <dttm>                  <dbl>     <dbl> <fct>      <int>\n1 C001      E01         2020-09-22 10:47:54       169        34 tech           3\n2 C002      E01         2020-09-07 22:10:25       206        52 tech           2\n3 C003      E01         2020-07-06 12:08:59       207        41 tech           2\n4 C004      E01         2020-02-20 13:12:03       132        16 tech           4\n5 C005      E01         2020-11-08 17:42:10       178        20 returns        3\n6 C006      E01         2020-06-01 19:06:12       230        46 returns        2\n# … with abbreviated variable names ¹​issue_category, ²​satisfaction\n\n#|eval:true\n#|echo:true\n\nNow that I have the updated columns and the table is in the correct format , I can now make a gg plot."
  },
  {
    "objectID": "posts/Fourth Post /index.html#gg-plot",
    "href": "posts/Fourth Post /index.html#gg-plot",
    "title": "Fourth Blog Post",
    "section": "GG Plot",
    "text": "GG Plot\n\n#Call ggplot to get blank canvas \nggplot()\n\n\n\n#|eval:true\n#|echo:true"
  },
  {
    "objectID": "posts/Fifth Post /index.html",
    "href": "posts/Fifth Post /index.html",
    "title": "Fifth Blog Post",
    "section": "",
    "text": "Today, I will be demonstrating to you my knowledge on data import.\nThe main goals of this blog post are :\n1)Show that I understand the major topics of this chapter including set up, viewing data and so much more!\n2)Demonstrate my understanding of the specific chapters titled “built in data” and “writing data”\nTo demonstrate this I will be completing the exercised assigned in the text book\n\n\n\nData import is the act of bringing in data and assessing it"
  },
  {
    "objectID": "posts/Fifth Post /index.html#load-the-package",
    "href": "posts/Fifth Post /index.html#load-the-package",
    "title": "Fifth Blog Post",
    "section": "Load the package",
    "text": "Load the package\nFirst, I am going to load the necessary packages needed for this exercise, as we do in every post.\n\n#Load Packages \n\nlibrary(rio)\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.0     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.1     ✔ tibble    3.2.0\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.1     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the \u001b]8;;http://conflicted.r-lib.org/\u0007conflicted package\u001b]8;;\u0007 to force all conflicts to become errors"
  },
  {
    "objectID": "posts/Fifth Post /index.html#import-the-data",
    "href": "posts/Fifth Post /index.html#import-the-data",
    "title": "Fifth Blog Post",
    "section": "Import the data",
    "text": "Import the data\nNext, I want to import the data and be aware of the data set that I am using. In this case Star wars is an already built-in data set, so I can use data(starwars) to import the data\n\n#Import data frame/already built in \ndata(\"starwars\")\n\n#Export the data \n#To export the data that is already built in you will follow export(the name of data frame (previously assigned), the csv file and where). For this example it will look like this\n\nexport(starwars,\"data/starwars.csv\")\n\n\n#After exporting the data, I now have to import the data using read_csv. The instructions also states that I should assign the pathway to the object starwars.  \n\nstarwars<-read_csv(\"data/starwars.csv\")\n\nRows: 87 Columns: 14\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (11): name, hair_color, skin_color, eye_color, sex, gender, homeworld, s...\ndbl  (3): height, mass, birth_year\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nFor the sake of the assignment I will use read_csv as directed but I also wanted to show you how to use rio::import to the csv file.\n\nstarwars_csv<- import(\"data/starwars.csv\")  # comma-separated values\n\n#|echo:true\n#|eval:true\n\nI’m going to reload the variables set above for the assignment\n\ndata(\"starwars\")\nexport(starwars,\"data/starwars.csv\")\nstarwars<-read_csv(\"data/starwars.csv\")\n\nRows: 87 Columns: 14\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (11): name, hair_color, skin_color, eye_color, sex, gender, homeworld, s...\ndbl  (3): height, mass, birth_year\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n#|echo:true\n#|eval:true\n\n##View the data\nNow that I’ve imported and exported the data , I would like to view it and see what is included in the data set. Using the view function I will view the data and it will output\nYou can view it in the console pane but I won’t put it in the script because of the pop up. Instead I will provide a screenshot of the output.\n\nlibrary(knitr)\n#When using view(starwars), it will show the data in a grid-like fashion \n\n\n\nknitr::include_graphics(\"/Users/Alexus/Desktop/Screenshot of View function.png\")\n\n\n\n#|echo:true\n#|eval:true\n\n##Print\nPrint data should be used in the console and will print out only the first ten rows of the data.\n##Glimpse\nThe glimpse() function is used to show the columns as rows , this is a sideway view which is beneficial because some of the data has a lot of columns.\n\nglimpse(starwars)\n\nRows: 87\nColumns: 14\n$ name       <chr> \"Luke Skywalker\", \"C-3PO\", \"R2-D2\", \"Darth Vader\", \"Leia Or…\n$ height     <dbl> 172, 167, 96, 202, 150, 178, 165, 97, 183, 182, 188, 180, 2…\n$ mass       <dbl> 77.0, 75.0, 32.0, 136.0, 49.0, 120.0, 75.0, 32.0, 84.0, 77.…\n$ hair_color <chr> \"blond\", NA, NA, \"none\", \"brown\", \"brown, grey\", \"brown\", N…\n$ skin_color <chr> \"fair\", \"gold\", \"white, blue\", \"white\", \"light\", \"light\", \"…\n$ eye_color  <chr> \"blue\", \"yellow\", \"red\", \"yellow\", \"brown\", \"blue\", \"blue\",…\n$ birth_year <dbl> 19.0, 112.0, 33.0, 41.9, 19.0, 52.0, 47.0, NA, 24.0, 57.0, …\n$ sex        <chr> \"male\", \"none\", \"none\", \"male\", \"female\", \"male\", \"female\",…\n$ gender     <chr> \"masculine\", \"masculine\", \"masculine\", \"masculine\", \"femini…\n$ homeworld  <chr> \"Tatooine\", \"Tatooine\", \"Naboo\", \"Tatooine\", \"Alderaan\", \"T…\n$ species    <chr> \"Human\", \"Droid\", \"Droid\", \"Human\", \"Human\", \"Human\", \"Huma…\n$ films      <chr> \"The Empire Strikes Back|Revenge of the Sith|Return of the …\n$ vehicles   <chr> \"Snowspeeder|Imperial Speeder Bike\", NA, NA, NA, \"Imperial …\n$ starships  <chr> \"X-wing|Imperial shuttle\", NA, NA, \"TIE Advanced x1\", NA, N…\n\n#|echo:true\n#|eval:true\n\n##Summary\nThe summary() function gives us an overview of the data , specifically for values such as mean , medium , maximum and so forth. This is useful for interpreting if R mistook certain values as integers.\n\nsummary(starwars)\n\n     name               height           mass          hair_color       \n Length:87          Min.   : 66.0   Min.   :  15.00   Length:87         \n Class :character   1st Qu.:167.0   1st Qu.:  55.60   Class :character  \n Mode  :character   Median :180.0   Median :  79.00   Mode  :character  \n                    Mean   :174.4   Mean   :  97.31                     \n                    3rd Qu.:191.0   3rd Qu.:  84.50                     \n                    Max.   :264.0   Max.   :1358.00                     \n                    NA's   :6       NA's   :28                          \n  skin_color         eye_color           birth_year         sex           \n Length:87          Length:87          Min.   :  8.00   Length:87         \n Class :character   Class :character   1st Qu.: 35.00   Class :character  \n Mode  :character   Mode  :character   Median : 52.00   Mode  :character  \n                                       Mean   : 87.57                     \n                                       3rd Qu.: 72.00                     \n                                       Max.   :896.00                     \n                                       NA's   :44                         \n    gender           homeworld           species             films          \n Length:87          Length:87          Length:87          Length:87         \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n                                                                            \n   vehicles          starships        \n Length:87          Length:87         \n Class :character   Class :character  \n Mode  :character   Mode  :character  \n                                      \n                                      \n                                      \n                                      \n\n#|echo:true\n#|eval:true\n\n###Return back to assignment (Changing column type and graph)\nIn this part of the assignment, I will change the column types inside of the data.\nDirections: Convert the columns hair_color, skin_color, eye_color, sex, gender, homeworld, and species to col(factor)\nFirst : I am going to use the spec function so that I can view the current variable types.\nSecond: Re-import the data file with the corrected variable types so that it is updated\n\nspec(starwars)\n\ncols(\n  name = col_character(),\n  height = col_double(),\n  mass = col_double(),\n  hair_color = col_character(),\n  skin_color = col_character(),\n  eye_color = col_character(),\n  birth_year = col_double(),\n  sex = col_character(),\n  gender = col_character(),\n  homeworld = col_character(),\n  species = col_character(),\n  films = col_character(),\n  vehicles = col_character(),\n  starships = col_character()\n)\n\ncorrected_cols<-cols(\n  name = col_character(),\n  height = col_double(),\n  mass = col_double(),\n  hair_color = col_factor(),\n  skin_color = col_factor(),\n  eye_color = col_factor(),\n  birth_year = col_double(),\n  sex = col_factor(),\n  gender = col_factor(),\n  homeworld = col_factor(),\n  species = col_factor(),\n  films = col_character(),\n  vehicles = col_character(),\n  starships = col_character()\n)\n\nstarwars <- read_csv(\"data/starwars.csv\", col_types = corrected_cols)\n#|echo:true\n#|eval:true\n\n###Writing in data\nLastly, I will be demonstrating my knowledge of writing data by creating a table that includes my completed and missing assignments. Completing assignment has been very hard for me with personal life but it’s ok .. this table will help me visually see it.\n\nassignments_completed<-tibble(\n  assignments = c(\"Assignment 5\", \"Assignment 6\", \"Assignment 7-9\",\"Midterm 1\"),\n  completed = c(\"completed\", \"not completed\", \"not completed\",\"not completed\"),\n)\n\nview(assignments_completed)\n\n#Below I will show a screenshot of this table \n\n#I am using file.choose() as a shortcut to find the path of my document \n\nknitr::include_graphics(\"/Users/Alexus/Desktop/Assignments completion table.png\")\n\n\n\n#|echo:true\n#|eval:true\n\nThat is all for my post today, chao!!"
  },
  {
    "objectID": "posts/Sixth Blog post /index.html",
    "href": "posts/Sixth Blog post /index.html",
    "title": "Week 6 Data Summaries",
    "section": "",
    "text": "Hello, welcome to my new blog post\nIn this post I will be explaining to you the main topics included in week 6. These topics include summarizing data , using in-line coding, max/mean/min and so much more! Let’s get into it!"
  },
  {
    "objectID": "posts/Sixth Blog post /index.html#set-up",
    "href": "posts/Sixth Blog post /index.html#set-up",
    "title": "Week 6 Data Summaries",
    "section": "5.1 Set-Up",
    "text": "5.1 Set-Up\nThe first step before starting this exercise is to load the necessary packages.\n\nlibrary(tidyverse)   # data wrangling functions\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.0     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.1     ✔ tibble    3.2.0\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.1     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the \u001b]8;;http://conflicted.r-lib.org/\u0007conflicted package\u001b]8;;\u0007 to force all conflicts to become errors\n\nlibrary(rtweet)      # for searching tweets\n\n\nAttaching package: 'rtweet'\n\nThe following object is masked from 'package:purrr':\n\n    flatten\n\nlibrary(kableExtra)  # for nice tables\n\n\nAttaching package: 'kableExtra'\n\nThe following object is masked from 'package:dplyr':\n\n    group_rows"
  },
  {
    "objectID": "posts/Sixth Blog post /index.html#r-objects",
    "href": "posts/Sixth Blog post /index.html#r-objects",
    "title": "Week 6 Data Summaries",
    "section": "5.2.1 R-objects",
    "text": "5.2.1 R-objects\nThe next step in this set-up is to download the data and save it into the directory. Load the data after that using the readRS function.\n\ntweets<- readRDS(file = \"/Users/Alexus/Downloads/ncod_tweets.rds\")\n\nBefore I do anything with the data , I want to view the data and what it consist of using the glimpse() function.\n\nglimpse(tweets)\n\n\nhead(tweets)\n\n# A tibble: 6 × 90\n  user_id       statu…¹ created_at          scree…² text  source displ…³ reply…⁴\n  <chr>         <chr>   <dttm>              <chr>   <chr> <chr>    <dbl> <chr>  \n1 140740738414… 144801… 2021-10-12 20:12:27 Seanac… \"#LG… Twitt…     139 <NA>   \n2 986008595622… 144801… 2021-10-12 20:11:52 _blayn… \"Hus… Twitt…      52 <NA>   \n3 895105557048… 144801… 2021-10-12 20:11:40 ShiguS… \"Wel… Twitt…      72 <NA>   \n4 114895848585… 144801… 2021-10-12 20:11:26 M_L_Ja… \"My … Twitt…     179 <NA>   \n5 142997672889… 144801… 2021-10-12 20:11:17 LoboWo… \"#Ca… Twitt…     243 <NA>   \n6 4730258930    144801… 2021-10-12 20:10:59 LogixTM \"If … Twitt…     196 <NA>   \n# … with 82 more variables: reply_to_user_id <chr>, reply_to_screen_name <chr>,\n#   is_quote <lgl>, is_retweet <lgl>, favorite_count <int>,\n#   retweet_count <int>, quote_count <int>, reply_count <int>, hashtags <list>,\n#   symbols <list>, urls_url <list>, urls_t.co <list>,\n#   urls_expanded_url <list>, media_url <list>, media_t.co <list>,\n#   media_expanded_url <list>, media_type <list>, ext_media_url <list>,\n#   ext_media_t.co <list>, ext_media_expanded_url <list>, …"
  },
  {
    "objectID": "posts/Sixth Blog post /index.html#summarise",
    "href": "posts/Sixth Blog post /index.html#summarise",
    "title": "Week 6 Data Summaries",
    "section": "5.3 summarise",
    "text": "5.3 summarise\nSummarise() is a function in r that allows you to calculate things such as the mean, median and much more! Lets try to calculate the mean, median, min and max of the re-tweet count\n\n#assign it to a variable , use summarise()function\nretweet_summary <- summarise(tweets, \n                           mean_retweet = mean(retweet_count),\n                           median_retweet = median(retweet_count),\n                           min_retweet = min(retweet_count),\n                           max_retweet = max(retweet_count))\n\nWe can then print out the what we just assigned utilizing kable\n\nknitr::kable(retweet_summary) \n\n\n\n \n  \n    mean_retweet \n    median_retweet \n    min_retweet \n    max_retweet \n  \n \n\n  \n    3.166632 \n    0 \n    0 \n    2525 \n  \n\n\n\n\n\nWe can find different values of the data , such as the standard deviations of the data .\n\nretweet_summary <- summarise(tweets, \n                           mean_retweet = mean(retweet_count),\n                           median_retweet = median(retweet_count),\n                           min_retweet = min(retweet_count),\n                           max_retweet = max(retweet_count),\n                           sd_retweet= sd(retweet_count)\n                            )\n\nLet’s print this out using the kable function again to see the new table\n\nknitr::kable(retweet_summary) \n\n\n\n \n  \n    mean_retweet \n    median_retweet \n    min_retweet \n    max_retweet \n    sd_retweet \n  \n \n\n  \n    3.166632 \n    0 \n    0 \n    2525 \n    35.8742 \n  \n\n\n\n\n\nWe can now try plotting a histogram using the data in the textbook but with my spin to it of course !\n\nggplot(tweets, aes(x = retweet_count)) + #y-value was not included so that the counts can be automatic (hint: look at the \"y-value\" of the graph)\n  geom_histogram(bins = 25) + \n  scale_x_continuous(trans = \"pseudo_log\", \n                     breaks = c(0, 1, 10, 100, 1000, 10000)) #for the breaks of the graph (to separate the counts )\n\n\n\n\nThe textbook also mentions that we could add extra functions inside of the summarise() such as n which counts the number of rows for a specific column (view below) and also the dates they were created.\n\nretweet_summary <- tweets %>%\n  summarise(mean_retweet = mean(retweet_count),\n            median_retweet= quantile(retweet_count, .5),\n            n = n(),\n            min_date = min(created_at),\n            max_date = max(created_at))\n\nNow let’s put the retweet summary in a table again to see what it looks like now !\n\nknitr::kable(retweet_summary) \n\n\n\n \n  \n    mean_retweet \n    median_retweet \n    n \n    min_date \n    max_date \n  \n \n\n  \n    3.166632 \n    0 \n    28626 \n    2021-10-10 00:10:02 \n    2021-10-12 20:12:27 \n  \n\n\n\n\n\nOOH that looks a little messy , lets try to view it using the glimpse function so that we get an idea of how the data looks.\n\nglimpse(retweet_summary)\n\nRows: 1\nColumns: 5\n$ mean_retweet   <dbl> 3.166632\n$ median_retweet <dbl> 0\n$ n              <int> 28626\n$ min_date       <dttm> 2021-10-10 00:10:02\n$ max_date       <dttm> 2021-10-12 20:12:27"
  },
  {
    "objectID": "posts/Sixth Blog post /index.html#operator",
    "href": "posts/Sixth Blog post /index.html#operator",
    "title": "Week 6 Data Summaries",
    "section": "5.3.1 $ Operator",
    "text": "5.3.1 $ Operator\nThe $ operator is used when wanting to selecting specific columns from a data set\nLets try to find select the column of source from the tweets data file.\n\ntweets$source\n\nAs you can see , it gives you all the entries for that specific column\nNow let’s try from the retweet_summary data set that I created\n\nretweet_summary$min_date\n\n[1] \"2021-10-10 00:10:02 UTC\"\n\nretweet_summary$max_date\n\n[1] \"2021-10-12 20:12:27 UTC\"\n\n\nWait but what if I wanted only a specific entry from that column?\nThat is where the use of brackets are important\n\ntweets$screen_name[7]\n\n[1] \"PankajK03650424\"\n\n\nAs you can see I requested for the 7th screen name of the column and was able to get it without the print out of the other values."
  },
  {
    "objectID": "posts/Sixth Blog post /index.html#pipes",
    "href": "posts/Sixth Blog post /index.html#pipes",
    "title": "Week 6 Data Summaries",
    "section": "5.3.2 Pipes",
    "text": "5.3.2 Pipes\nIn this section we will speak about pipes , this is a function that allows you to do one output and then the next. In the textbook, the author describes pipes as a “and then” function meaning do this then this.\nFor example let’s ask R to show me the mean of the retweet count “and then” show me the median of it.\n\n#Assign it to a variable, make it easier for me to call\nquoted_retweet<-tweets %>% #I used tweets on the left side b/c that is the data frame that I am selecting it from\n  summarise(mean_quoted_retweet = mean(quoted_retweet_count), #I am going to summarise it \n            median_quoted_retweet= median(quoted_retweet_count))\n\nNow let’s view it using the glimpse() function\n\nglimpse(quoted_retweet)\n\nRows: 1\nColumns: 2\n$ mean_quoted_retweet   <dbl> NA\n$ median_quoted_retweet <int> NA\n\n\nIt is showing NA because there isn’t enough values to make a median or mean."
  },
  {
    "objectID": "posts/Sixth Blog post /index.html#inline-coding",
    "href": "posts/Sixth Blog post /index.html#inline-coding",
    "title": "Week 6 Data Summaries",
    "section": "5.3.3 Inline Coding",
    "text": "5.3.3 Inline Coding\nInline coding is used when you want to make a statement about your data set using coding inside of the sentence. I know this is confusing , allow me to demonstrate.\n\n#First we will write the in line coding for the dates of the retweets\nretweet_from<-retweet_summary$min_date %>% #assign to variable so easier to use in sentence \n   format(\"%d %B, %Y\") #Using format to give us the date organized by date,month,year\nretweet_to<-retweet_summary$max_date %>%\n  format(\"%d %B, %Y\")\n\nNow that the code is in , lets put it in a sentence :\nThere were 28626 re-tweets between 10 October, 2021 and 12 October, 2021.\nTo see the output of this you can use the control shift k (on mac) to knit the document."
  },
  {
    "objectID": "posts/Sixth Blog post /index.html#counting",
    "href": "posts/Sixth Blog post /index.html#counting",
    "title": "Week 6 Data Summaries",
    "section": "5.4 Counting",
    "text": "5.4 Counting\nCounting is a function that can be used to count categorical data , this is efficient because it helps you know the number of non-numerical items.\nFor example, if I wanted to know the amount of android users and Iphone users in the data , I can use this code below.\n\n#sum is used to give me a total \nsum(stringr::str_count(tweets$source, pattern = \"Twitter for iPhone\"))\n\n[1] 13634\n\nsum(stringr::str_count(tweets$source, pattern = \"Twitter for Android\"))\n\n[1] 5878\n\n\nI can also produce a simpler example that shows the screen name of individuals with the number of re-tweets.\n\nretweets_per_user <- tweets %>%\n  count(screen_name,retweet_count, sort = TRUE)\n\nhead(retweets_per_user)\n\n# A tibble: 6 × 3\n  screen_name     retweet_count     n\n  <chr>                   <int> <int>\n1 interest_outfit             0    34\n2 NRArchway                   0    29\n3 dr_stack                    1    27\n4 IAmRocWitChevy1             1    22\n5 KatieZakrzewsk1             0    20\n6 Heyyitsju5tin               0    19"
  },
  {
    "objectID": "posts/Sixth Blog post /index.html#grouping",
    "href": "posts/Sixth Blog post /index.html#grouping",
    "title": "Week 6 Data Summaries",
    "section": "Grouping",
    "text": "Grouping\nThe grouping function is used to group data by a variable from the data set For example, in this example we view the verified users and the number of retweets.\n\ntweets_grouped <- tweets %>% #assign to variable\n  group_by(verified)\n\nverified <- tweets_grouped %>%\n  summarise(count = n(),\n            mean_retweets = mean(retweet_count)) %>%\n  ungroup()\n\nverified\n\n# A tibble: 2 × 3\n  verified count mean_retweets\n  <lgl>    <int>         <dbl>\n1 FALSE    26676          1.83\n2 TRUE      1950         21.5"
  },
  {
    "objectID": "posts/Sixth Blog post /index.html#data-nyc-exercise",
    "href": "posts/Sixth Blog post /index.html#data-nyc-exercise",
    "title": "Week 6 Data Summaries",
    "section": "Data Nyc Exercise",
    "text": "Data Nyc Exercise\nThis Data NYC exercise is to show a deeper understanding of the chapter using data outside of the textbook. This data will be taken from Data NYC Website.\nProfessor instructed me to obtain, import, summarize, and plot data.\nNYC School Inspection Data\nhttps://data.cityofnewyork.us/Health/DOHMH-School-Cafeteria-inspections-2020-Present-/5ery-qagt/explore"
  },
  {
    "objectID": "posts/Sixth Blog post /index.html#import-data-nyc",
    "href": "posts/Sixth Blog post /index.html#import-data-nyc",
    "title": "Week 6 Data Summaries",
    "section": "Import Data NYC",
    "text": "Import Data NYC\nImport the inspection data usin rio DOHMH_School_Cafeteria_inspections_2020-Present.csv\n\ninspection_nyc<-read.csv(\"/Users/Alexus/Downloads/DOHMH_School_Cafeteria_inspections__2020_-_Present_.csv\")"
  },
  {
    "objectID": "posts/Sixth Blog post /index.html#summarise-inspection-data",
    "href": "posts/Sixth Blog post /index.html#summarise-inspection-data",
    "title": "Week 6 Data Summaries",
    "section": "Summarise inspection data",
    "text": "Summarise inspection data\nNext, I am going to summarize the data but first I want to view what is included in the data, to do this I am going to use the glimpse() function.\n\nglimpse(inspection_nyc)\n\nRows: 11,093\nColumns: 25\n$ Record.ID            <chr> \"40542839\", \"40736086\", \"40542116\", \"40542900\", \"…\n$ SchoolName           <chr> \"P.S. 127 MCKINLEY PARK, RALPH A. FABRIZIO SCHOOL…\n$ Number               <chr> \"7805\", \"141315\", \"684\", \"1300\", \"34\", \"5400\", \"2…\n$ Street               <chr> \"7 AVENUE\", \"45 STREET\", \"LINDEN BOULEVARD\", \"BOY…\n$ City                 <chr> \"Brooklyn\", \"BROOKLYN\", \"Brooklyn\", \"Bronx\", \"New…\n$ State                <chr> \"NY\", \"NY\", \"NY\", \"NY\", \"NY\", \"NY\", \"NY\", \"NY\", \"…\n$ Borough              <chr> \"Brooklyn\", \"Brooklyn\", \"Brooklyn\", \"Bronx\", \"Man…\n$ ZipCode              <int> 11228, NA, 11203, 10472, 10026, 11203, 11693, 112…\n$ LastInspection       <chr> \"2/2/23\", \"2/15/23\", \"1/23/23\", \"3/9/23\", \"1/31/2…\n$ Permittee            <chr> \"NEW YORK CITY DEPARTMENT OF EDUCATION\", \"CONGREG…\n$ InspectionDate       <chr> \"7/28/22\", \"3/1/22\", \"11/17/22\", \"3/9/23\", \"8/1/2…\n$ PTET                 <int> 2530, 2533, 2530, 2530, 2530, 2530, 2530, 2529, 2…\n$ Site.Type            <chr> \"FSE (Public School Cafeteria)\", \"FSE (Private Sc…\n$ Level                <chr> \"\", \"G\", \"C\", \"C\", \"C\", \"C\", \"G\", \"\", \"\", \"C\", \"\"…\n$ Code                 <chr> \"\", \"10A\", \"04A\", \"04L\", \"04M\", \"04L\", \"10F\", \"\",…\n$ ViolationDescription <chr> \"\", \"Toilet facility not maintained and provided …\n$ LATITUDE             <dbl> 40.62413, 0.00000, 40.65363, 40.83159, 40.80246, …\n$ LONGITUDE            <dbl> -74.01883, 0.00000, -73.93311, -73.87891, -73.946…\n$ COMMUNITYBOARD       <int> 310, NA, 317, 209, 110, 317, 414, 303, 414, 412, …\n$ COUNCILDISTRICT      <int> 43, NA, 41, 18, 9, 45, 31, 36, 31, 27, 13, 27, 38…\n$ CENSUSTRACT          <int> 20600, NA, 87000, 5600, 19000, 94600, 94202, 2830…\n$ BIN                  <int> 3150481, NA, 3102005, 2027459, 1051434, 3104513, …\n$ BBL                  <dbl> 3059730001, 3, 3046730001, 2038640001, 1016010001…\n$ NTA                  <chr> \"BK30\", \"\", \"BK91\", \"BX08\", \"MN11\", \"BK96\", \"QN12…\n$ BOROCODE             <int> 3, 3, 3, 2, 1, 3, 4, 3, 4, 4, 2, 4, 3, 3, 3, 5, 4…"
  },
  {
    "objectID": "posts/Midterm 1 /index.html",
    "href": "posts/Midterm 1 /index.html",
    "title": "Midterm 1",
    "section": "",
    "text": "Welcome to the first part of my midterm. In this post I will be demonstrating my understanding of multiple tasks that we have learned so far.\nDirections: Write a blog post where you demonstrate your ability to use these basic programming concepts in R.\nR objects: show that you understand and can create/use objects of various types, including at least: character/string, numeric, integer, logical, data.frame, and list. Show that you can index objects appropriately (e.g., locate elements of an object, change elements of an object etc.)\nLogical operations: show that you understand and can use logical operators in R (e.g., == | > < >= <=)\nLoops: Show that you understand the components of a for loop, and that you can use a for loop.\nFunctions: Show that you understand the syntax for declaring your own function, and that you can declare and run your own custom function to accomplish some task (you choose what the function does)."
  },
  {
    "objectID": "posts/Midterm 1 /index.html#r-objects",
    "href": "posts/Midterm 1 /index.html#r-objects",
    "title": "Midterm 1",
    "section": "R-objects",
    "text": "R-objects\nR- objects are words that ” identifies and store the values of some data for later use” Objects can contain numbers, words , full stops and underscores . Sometimes objects are referred to as variables.\nCharacter/string\nA character is defined as a data type representing strings of text\nI will give you an example of strings and also non-examples\n\n# Strings are encased by quotes , this can look like:\n\n\"1\"\n\n[1] \"1\"\n\n\"A,B,C\"\n\n[1] \"A,B,C\"\n\n# In comparison , when a numbers or texts are not encased by quotes they are not consider strings\n\n1 # This would be simply interpreted as a numeric value \n\n[1] 1\n\nA # This will be considered a character because it is a text but not a string \n\nError in eval(expr, envir, enclos): object 'A' not found\n\n\nType of ()\nThe type of function is a function used when trying to determine the data type being used. We can see this using the same strings, characters and double that I used above.\n\ntypeof(1)\n\n[1] \"double\"\n\ntypeof(\"1\")\n\n[1] \"character\"\n\ntypeof(\"A,B,C\")\n\n[1] \"character\"\n\ntypeof (A)\n\nError in typeof(A): object 'A' not found\n\n\nNotice that when using the typeof() function above, it outputted the data types. However, you may be puzzled by the error that we see for A. This error states “Error in typeof(A) : object ‘A’ not found” , which basically means that the letter A by itself is considered an object, therefore you would need to assign something to it.\nNow lets discuss the other results,\nFor the first result , 1 is considered a double , this is because r recognizes any number with a decimal as a double for example 1.0 is the same as 1. Therefore, 1 is a double. I will get into numeric values : doubles and integers in the next section.\nFor A,B,C it is a character string because the letters are encased by quotes and the number 1 without quotation is considered a character because it is not surrounded by quotes."
  },
  {
    "objectID": "posts/Midterm 1 /index.html#logical-operations",
    "href": "posts/Midterm 1 /index.html#logical-operations",
    "title": "Midterm 1",
    "section": "Logical Operations",
    "text": "Logical Operations\nLogical operator can include arithmetic operator , relational operator and logical operators. I will show my understanding of all these operators below while educating you on how to use them. Let’s start !\nArithmetic Operator\nA type of data structure that collects values with the same data type, like T/F values, numbers, or strings.\n\nArithmetic_operators <- c(\"*\", \"+\",\"-\",\"/\",\"%%\",\"^\")    #Assigning arithmetic operators to a variable so that you can visually see the list of them\nArithmetic_operators\n\n[1] \"*\"  \"+\"  \"-\"  \"/\"  \"%%\" \"^\" \n\n1*4 #* is a arithmetic operator used for multiplication\n\n[1] 4\n\n7+8 # + is a arithmetic operator used for addition \n\n[1] 15\n\n9-0 # - is an arithmetic operator used for subtraction \n\n[1] 9\n\n16/4 # / is an arithmetic operator used for division \n\n[1] 4\n\n25%%6 # %% is used to find the remainder \n\n[1] 1\n\n9^2   # ^ is used to represent an exponent \n\n[1] 81\n\n#Now, let's run this code ! \n\nRelational operator\nRelational operators are operators that are used to compare or show the relationships between objects\n\nrelational_operator <- c(\"==\",\"!=\",\">\",\">=\",\"<\",\"<=\",\"%in%\") #assigning it to a variable so you can have list \nrelational_operator\n\n[1] \"==\"   \"!=\"   \">\"    \">=\"   \"<\"    \"<=\"   \"%in%\"\n\n\"C\"==\"C\" #== is a operator used as \"equal to\"\n\n[1] TRUE\n\n\"B!\"=\"Z\" # != is an operator that is used to represent \"not equal to\" \n8>4 # > is an operator that is used to represent \"greater than\"\n\n[1] TRUE\n\n16>=15 # >= is an operator that is used to represent \"greater than or equal to\"\n\n[1] TRUE\n\n15<16 # < is an operator used to represent \"less than\"\n\n[1] TRUE\n\n14<=3 # <= is an operator used to represent \"less than or equal to \"\n\n[1] FALSE\n\n\"sorrel\"%in%drinks #%in% is an operator to represent \"match\", which is basically to \"match\" objects to vectors or list \n\n[1] TRUE\n\n\nLogical operators Logical operators are used to compare objects in vectors These can only be used for numeric, logical or complex types\n\nlogical_operators <-c(\"&\",\"|\",\"&&\",\"||\",\"!\")\nlogical_operators\n\n[1] \"&\"  \"|\"  \"&&\" \"||\" \"!\" \n\nc(9,8,7) & c(9,10,11) == c(9,8,2) #& and compares each element\n\n[1]  TRUE FALSE FALSE\n\nc(T,F,F,F,F,T)|c(F,T,T,T,T,F) == c(F,F,T,T,F,T) # \"|\" compares each element \n\n[1]  TRUE FALSE  TRUE  TRUE FALSE  TRUE\n\nc(9+8i,6+7i,10+2i) && c(9+6i,7+6i,2+10i) == F  #&& compares the first element , this example is using complex types\n\nWarning in c(9 + (0+8i), 6 + (0+7i), 10 + (0+2i)) && c(9 + (0+6i), 7 + (0+6i), :\n'length(x) = 3 > 1' in coercion to 'logical(1)'\n\nWarning in c(9 + (0+8i), 6 + (0+7i), 10 + (0+2i)) && c(9 + (0+6i), 7 + (0+6i), :\n'length(x) = 3 > 1' in coercion to 'logical(1)'\n\n\n[1] FALSE\n\nc(T,T,F) || c(T,F,F) == T  # compares the first element \n\nWarning in c(T, T, F) || c(T, F, F) == T: 'length(x) = 3 > 1' in coercion to\n'logical(1)'\n\n\n[1] TRUE\n\n!F==T    #! is used to represent \"not\", what it is not \n\n[1] TRUE\n\n\nThe warning is apart of the new r package"
  },
  {
    "objectID": "posts/Midterm 1 /index.html#for-loop",
    "href": "posts/Midterm 1 /index.html#for-loop",
    "title": "Midterm 1",
    "section": "For Loop",
    "text": "For Loop\nFor loops is a fluent pathway that can help us repeat statements that we want generated until whatever condition we set is completed. I can show you a few examples below !\n\ndoubles<- numeric() # assign the variable to numeric function so that r knows that i is numeric \nfor (i in 1:20) # i will be representative of the variable we will use for the loop, I am using the for loop to count from 1 to 20\n  { doubles<-c(doubles, i*2)   #inside of the brackets I will reassign the doubles data frame that I just created and make i double for each number \n  \n}\ndoubles  #calling the data frame to see the results \n\n [1]  2  4  6  8 10 12 14 16 18 20 22 24 26 28 30 32 34 36 38 40\n\n\nbreak break is to help us make a stop in the loop based on the certain condition we set. We will use the same doubles set to show this\n\ndoubles<-numeric()\nfor (i in 1:20)\n{ doubles<-c(doubles, i*2) \nif(i==6)\n{break}\n}\ndoubles\n\n[1]  2  4  6  8 10 12\n\n\nAs you can see above , once I set the condition of “if i=6 then break” The loop would not go on any more\n##Function\nCreating your own function is very fun , you can tell r what you want the code to do . I will create two functions and then we are all done !\nLet’s go !!\nFunction 1\nFor this first function, I wanted to create a function in which it multiplies the value of a multiplied by 2 , then I tried it using the function with different values of a.\n\na<-numeric() # make r know that a is numeric \nmynew_function<-function(a) # assign my new function to a variable \n{return(a*2)\n}\n\n#try my new function with different a values \nmynew_function(2) \n\n[1] 4\n\nmynew_function(4)\n\n[1] 8\n\nmynew_function(5)\n\n[1] 10\n\n\nFunction2\nI can make another function for numbers indivisible or divisible by 4.\n\ndivisible_4<- function(x,y,r) {  #name function using a name that will inform readers about what the function is for \n  x<-4\n  r<-y%%4 #using the %% logical tool you learned about earlier to give me remainder\n  \n  if (r>0) #if my remainder is more than 0 it would make the number indivisible by 4 \n    print(\"indivisible by 4\")\n  if (r==0)\n    #if my number is == to 0 , it would make it divisible  by 4 \n    print(\"divisible by 4\")\n}\n\ndivisible_4(y=16)\n\n[1] \"divisible by 4\"\n\ndivisible_4(y=17)\n\n[1] \"indivisible by 4\"\n\ndivisible_4(y=18)\n\n[1] \"indivisible by 4\"\n\n\nPhewww that was a lot , that is all for my midterm part 1 !"
  }
]