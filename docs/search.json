[
  {
    "objectID": "posts/Fourth Post Assignment /index.html",
    "href": "posts/Fourth Post Assignment /index.html",
    "title": "Fourth Blog POST",
    "section": "",
    "text": "Hey everyone, Welcome back to my blog post !\nToday I will be showing you all how to import data and make it visible\nLet’s Get Started!"
  },
  {
    "objectID": "posts/Fourth Post /index.html",
    "href": "posts/Fourth Post /index.html",
    "title": "Fourth Blog Post",
    "section": "",
    "text": "Hello Welcome to My Fourth Assignment\nToday I will be teaching you how to use data and visualize it using the exercises given to us in the textbook .\n\nDatatypes\nData types by definition are data represented by an object; Examples included integers, double, character, logical and complex (numbers with real and imaginary parts). Additionally these numbers can integers and doubles (numeric).\nIntegers are : 2,3,4\nDoubles are : 12,15,19\nCharacters are:\nCharacters are text that can be shown as a string (must be enclosed by quotation marks)\nFor example\n\ntypeof(\"cheese\")\n\n[1] \"character\"\n\n#|eval:true \n#|echo:true\n\nThis works with integers as well (if an integer has quotation marks surrounding it , it is then considered a character), see example below\n\ntypeof(\"1\")\n\n[1] \"character\"\n\ntypeof(\"4\")\n\n[1] \"character\"\n\n#|eval:true \n#|echo:true\n\nLogical statements are :\nLogical statements are True and False , they are also referred to as Boolean. See the example below.\nWhen using the as.logical function , 0 represents the false value and the 1 value represents the true value. See the example below\n\nrandomdance<-list(\n  words=\"shake\",\"my\",\"foot\"\n)\n\nrandomdance=as.logical(0)  #Set random dance list to false values \n  \nstr(randomdance)          #call random dance using str and output value \n\n logi FALSE\n\nrandomdance=as.logical(1)  #Set random dance list to true value \n\nstr(randomdance)         #call random dance using str and output true value\n\n logi TRUE\n\n#|eval:true \n#|echo:true\n\n\n\n\nTidy data\nTidy data is a format that organizes data in a specific structure.\nEach column represents a variable\nEach row represents an observation\nEach cell represents a value\nI will display this using the exercises from the text book\nHint: Remember to load dyplr and set eval & echo to true to display the code and output ( you should’ve learned this from my week 3 blog)\n\n#Load all of the packages using the library function\n\nlibrary(tidyverse) \n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.0     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.1     ✔ tibble    3.2.0\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.1     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the \u001b]8;;http://conflicted.r-lib.org/\u0007conflicted package\u001b]8;;\u0007 to force all conflicts to become errors\n\nlibrary(patchwork) \nlibrary(ggthemes)  \nlibrary(lubridate) \nlibrary(knitr)\nlibrary(kableExtra)\n\n\nAttaching package: 'kableExtra'\n\nThe following object is masked from 'package:dplyr':\n\n    group_rows\n\n\n1) Read in the data set\n\n#Read in the data set for the exercise and save it to the survey_data\n\nsurvey_data <- read_csv(\"https://psyteachr.github.io/ads-v2/data/survey_data.csv\")\n\nRows: 707 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (3): caller_id, employee_id, issue_category\ndbl  (3): wait_time, call_time, satisfaction\ndttm (1): call_start\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n#|eval:true\n#|echo:false\n\n2)View the top of the data set\n\n#See what the data looks like using head function \n\nhead(survey_data)\n\n# A tibble: 6 × 7\n  caller_id employee_id call_start          wait_time call_time issue_…¹ satis…²\n  <chr>     <chr>       <dttm>                  <dbl>     <dbl> <chr>      <dbl>\n1 C001      E01         2020-09-22 10:47:54       169        34 tech           3\n2 C002      E01         2020-09-07 22:10:25       206        52 tech           2\n3 C003      E01         2020-07-06 12:08:59       207        41 tech           2\n4 C004      E01         2020-02-20 13:12:03       132        16 tech           4\n5 C005      E01         2020-11-08 17:42:10       178        20 returns        3\n6 C006      E01         2020-06-01 19:06:12       230        46 returns        2\n# … with abbreviated variable names ¹​issue_category, ²​satisfaction\n\n#This would be considered a tidy data because each column represents a variable, rows are observation and each cell is a value.\n#|eval:true\n#|echo:true\n\n3)Change the column type, make data more concise\n\n#Change column types \n\nsurvey_col_types <- cols(\n  caller_id = col_character(),\n  employee_id = col_character(),\n  call_start = col_datetime(format = \"\"),\n  wait_time = col_double(),\n  call_time = col_double(),\n  issue_category = col_factor(levels = c(\"tech\", \"sales\", \"returns\", \"other\")), #Update this column to make the issue clear to viewers \n  satisfaction = col_integer()\n)\n\n# We have to re-import the data because it is updated \nsurvey_data <- read_csv(\"https://psyteachr.github.io/ads-v2/data/survey_data.csv\",\n                        col_types = survey_col_types)\n\n\n#Call the head of the graph and use the spec function to view updated column types \n\nspec(survey_data)   #Using spec() function to see column types \n\ncols(\n  caller_id = col_character(),\n  employee_id = col_character(),\n  call_start = col_datetime(format = \"\"),\n  wait_time = col_double(),\n  call_time = col_double(),\n  issue_category = col_factor(levels = c(\"tech\", \"sales\", \"returns\", \"other\"), ordered = FALSE, include_na = FALSE),\n  satisfaction = col_integer()\n)\n\nhead(survey_data)   #Using head function to view the changes \n\n# A tibble: 6 × 7\n  caller_id employee_id call_start          wait_time call_time issue_…¹ satis…²\n  <chr>     <chr>       <dttm>                  <dbl>     <dbl> <fct>      <int>\n1 C001      E01         2020-09-22 10:47:54       169        34 tech           3\n2 C002      E01         2020-09-07 22:10:25       206        52 tech           2\n3 C003      E01         2020-07-06 12:08:59       207        41 tech           2\n4 C004      E01         2020-02-20 13:12:03       132        16 tech           4\n5 C005      E01         2020-11-08 17:42:10       178        20 returns        3\n6 C006      E01         2020-06-01 19:06:12       230        46 returns        2\n# … with abbreviated variable names ¹​issue_category, ²​satisfaction\n\n#|eval:true\n#|echo:true\n\nNow that I have the updated columns and the table is in the correct format , I can now make a gg plot.\n\n\n\nGG Plot\n\n#Call ggplot to get blank canvas \nggplot()\n\n\n\n#Edit GG plot to add details to the graph \n\n#Aesthetics used to add axis titles to the graph \n\nggplot(survey_data, aes(x = issue_category,fill=issue_category)) +\n  geom_bar()\n\n\n\n#|eval:true\n#|echo:true\n\nThis is a basic plot demonstrating the amount of issues that the customers had. I can conclude that the customers had the most issues with technology amongst other problems\nCheck out my Blog 5 for more complex graphs.\nBye for now !"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Alexus Quarto blog (Assignment 1)",
    "section": "",
    "text": "Fourth Blog Post\n\n\n\n\n\n\n\nnews\n\n\ncode\n\n\nanalysis\n\n\n\n\n\n\n\n\n\n\n\nMar 29, 2023\n\n\nAlexus Lawrence\n\n\n\n\n\n\n  \n\n\n\n\nThird Blog Post\n\n\n\n\n\n\n\nnews\n\n\ncode\n\n\nanalysis\n\n\n\n\n\n\n\n\n\n\n\nMar 26, 2023\n\n\nAlexus Lawrence\n\n\n\n\n\n\n  \n\n\n\n\nThird Blog Post\n\n\n\n\n\n\n\nnews\n\n\ncode\n\n\nanalysis\n\n\n\n\n\n\n\n\n\n\n\nMar 2, 2023\n\n\nAlexus Lawrence\n\n\n\n\n\n\n  \n\n\n\n\nSixth Blog Post\n\n\n\n\n\n\n\nnews\n\n\ncode\n\n\nanalysis\n\n\n\n\n\n\n\n\n\n\n\nMar 2, 2023\n\n\nAlexus Lawrence\n\n\n\n\n\n\n  \n\n\n\n\nSecond Blog Post\n\n\n\n\n\n\n\nnews\n\n\ncode\n\n\nanalysis\n\n\n\n\n\n\n\n\n\n\n\nFeb 14, 2023\n\n\nAlexus Lawrence\n\n\n\n\n\n\n  \n\n\n\n\nFirst Blog Post\n\n\n\n\n\n\n\nnews\n\n\ncode\n\n\nanalysis\n\n\n\n\n\n\n\n\n\n\n\nFeb 6, 2023\n\n\nAlexus Lawrence\n\n\n\n\n\n\n  \n\n\n\n\nWelcome To My Blog\n\n\n\n\n\n\n\nnews\n\n\n\n\n\n\n\n\n\n\n\nFeb 3, 2023\n\n\nTristan O’Malley\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/Fourth Post /index.html#datatypes",
    "href": "posts/Fourth Post /index.html#datatypes",
    "title": "Fourth Blog Post",
    "section": "Datatypes",
    "text": "Datatypes\nData types by definition are data represented by an object; Examples included integers, double, character, logical and complex (numbers with real and imaginary parts). Additionally these numbers can integers and doubles (numeric).\nIntegers are : 2,3,4\nDoubles are : 12,15,19\nCharacters are:\nCharacters are text that can be shown as a string (must be enclosed by quotation marks)\nFor example\n\ntypeof(\"cheese\")\n\n[1] \"character\"\n\n#|eval:true \n#|echo:true\n\nThis works with integers as well (if an integer has quotation marks surrounding it , it is then considered a character), see example below\n\ntypeof(\"1\")\n\n[1] \"character\"\n\ntypeof(\"4\")\n\n[1] \"character\"\n\n#|eval:true \n#|echo:true\n\nLogical statements are :\nLogical statements are True and False , they are also referred to as Boolean. See the example below.\nWhen using the as.logical function , 0 represents the false value and the 1 value represents the true value. See the example below\n\nrandomdance<-list(\n  words=\"shake\",\"my\",\"foot\"\n)\n\nrandomdance=as.logical(0)  #Set random dance list to false values \n  \nstr(randomdance)          #call random dance using str and output value \n\n logi FALSE\n\nrandomdance=as.logical(1)  #Set random dance list to true value \n\nstr(randomdance)         #call random dance using str and output true value\n\n logi TRUE\n\n#|eval:true \n#|echo:true"
  },
  {
    "objectID": "posts/Fourth Post /index.html#tidy-data",
    "href": "posts/Fourth Post /index.html#tidy-data",
    "title": "Fourth Blog Post",
    "section": "Tidy data",
    "text": "Tidy data\nTidy data is a format that organizes data in a specific structure.\nEach column represents a variable\nEach row represents an observation\nEach cell represents a value\nI will display this using the exercises from the text book\nHint: Remember to load dyplr and set eval & echo to true to display the code and output ( you should’ve learned this from my week 3 blog)\n\n#Load all of the packages using the library function\n\nlibrary(tidyverse) \n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.0     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.1     ✔ tibble    3.2.0\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.1     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the \u001b]8;;http://conflicted.r-lib.org/\u0007conflicted package\u001b]8;;\u0007 to force all conflicts to become errors\n\nlibrary(patchwork) \nlibrary(ggthemes)  \nlibrary(lubridate) \nlibrary(knitr)\nlibrary(kableExtra)\n\n\nAttaching package: 'kableExtra'\n\nThe following object is masked from 'package:dplyr':\n\n    group_rows\n\n\nRead in the data set\n\n#Read in the data set for the exercise and save it to the survey_data\n\nsurvey_data <- read_csv(\"https://psyteachr.github.io/ads-v2/data/survey_data.csv\")\n\nRows: 707 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (3): caller_id, employee_id, issue_category\ndbl  (3): wait_time, call_time, satisfaction\ndttm (1): call_start\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n#See what the data looks like using head function \n\nhead(survey_data)\n\n# A tibble: 6 × 7\n  caller_id employee_id call_start          wait_time call_time issue_…¹ satis…²\n  <chr>     <chr>       <dttm>                  <dbl>     <dbl> <chr>      <dbl>\n1 C001      E01         2020-09-22 10:47:54       169        34 tech           3\n2 C002      E01         2020-09-07 22:10:25       206        52 tech           2\n3 C003      E01         2020-07-06 12:08:59       207        41 tech           2\n4 C004      E01         2020-02-20 13:12:03       132        16 tech           4\n5 C005      E01         2020-11-08 17:42:10       178        20 returns        3\n6 C006      E01         2020-06-01 19:06:12       230        46 returns        2\n# … with abbreviated variable names ¹​issue_category, ²​satisfaction\n\n#This would be considered a tidy data because each column represents a variable, rows are observation and each cell is a value.\n#|eval:true\n#|echo:true\n\n\n#Change column types \n\nsurvey_col_types <- cols(\n  caller_id = col_character(),\n  employee_id = col_character(),\n  call_start = col_datetime(format = \"\"),\n  wait_time = col_double(),\n  call_time = col_double(),\n  issue_category = col_factor(levels = c(\"tech\", \"sales\", \"returns\", \"other\")), #Update this column to make the issue clear to viewers \n  satisfaction = col_integer()\n)\n\n# We have to re-import the data because it is updated \nsurvey_data <- read_csv(\"https://psyteachr.github.io/ads-v2/data/survey_data.csv\",\n                        col_types = survey_col_types)\n\n\n#Call the head of the graph and use the spec function to view updated column types \n\nspec(survey_data)   #Using spec() function to see column types \n\ncols(\n  caller_id = col_character(),\n  employee_id = col_character(),\n  call_start = col_datetime(format = \"\"),\n  wait_time = col_double(),\n  call_time = col_double(),\n  issue_category = col_factor(levels = c(\"tech\", \"sales\", \"returns\", \"other\"), ordered = FALSE, include_na = FALSE),\n  satisfaction = col_integer()\n)\n\nhead(survey_data)   #Using head function to view the changes \n\n# A tibble: 6 × 7\n  caller_id employee_id call_start          wait_time call_time issue_…¹ satis…²\n  <chr>     <chr>       <dttm>                  <dbl>     <dbl> <fct>      <int>\n1 C001      E01         2020-09-22 10:47:54       169        34 tech           3\n2 C002      E01         2020-09-07 22:10:25       206        52 tech           2\n3 C003      E01         2020-07-06 12:08:59       207        41 tech           2\n4 C004      E01         2020-02-20 13:12:03       132        16 tech           4\n5 C005      E01         2020-11-08 17:42:10       178        20 returns        3\n6 C006      E01         2020-06-01 19:06:12       230        46 returns        2\n# … with abbreviated variable names ¹​issue_category, ²​satisfaction\n\n#|eval:true\n#|echo:true\n\nNow that I have the updated columns and the table is in the correct format , I can now make a gg plot."
  },
  {
    "objectID": "posts/Fourth Post /index.html#gg-plot",
    "href": "posts/Fourth Post /index.html#gg-plot",
    "title": "Fourth Blog Post",
    "section": "GG Plot",
    "text": "GG Plot\n\n#Call ggplot to get blank canvas \nggplot()\n\n\n\n#|eval:true\n#|echo:true"
  }
]