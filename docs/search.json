[
  {
    "objectID": "posts/Fourth Post Assignment /index.html",
    "href": "posts/Fourth Post Assignment /index.html",
    "title": "Fourth Blog POST",
    "section": "",
    "text": "Hey everyone, Welcome back to my blog post !\nToday I will be showing you all how to import data and make it visible\nLet’s Get Started!"
  },
  {
    "objectID": "posts/Fourth Post /index.html",
    "href": "posts/Fourth Post /index.html",
    "title": "Fourth Blog Post",
    "section": "",
    "text": "Hello Welcome to My Fourth Assignment\nToday I will be teaching you how to use data and visualize it using the exercises given to us in the textbook .\n\nDatatypes\nData types by definition are data represented by an object; Examples included integers, double, character, logical and complex (numbers with real and imaginary parts). Additionally these numbers can integers and doubles (numeric).\nIntegers are : 2,3,4\nDoubles are : 12,15,19\nCharacters are:\nCharacters are text that can be shown as a string (must be enclosed by quotation marks)\nFor example\n\ntypeof(\"cheese\")\n\n[1] \"character\"\n\n#|eval:true \n#|echo:true\n\nThis works with integers as well (if an integer has quotation marks surrounding it , it is then considered a character), see example below\n\ntypeof(\"1\")\n\n[1] \"character\"\n\ntypeof(\"4\")\n\n[1] \"character\"\n\n#|eval:true \n#|echo:true\n\nLogical statements are :\nLogical statements are True and False , they are also referred to as Boolean. See the example below.\nWhen using the as.logical function , 0 represents the false value and the 1 value represents the true value. See the example below\n\nrandomdance<-list(\n  words=\"shake\",\"my\",\"foot\"\n)\n\nrandomdance=as.logical(0)  #Set random dance list to false values \n  \nstr(randomdance)          #call random dance using str and output value \n\n logi FALSE\n\nrandomdance=as.logical(1)  #Set random dance list to true value \n\nstr(randomdance)         #call random dance using str and output true value\n\n logi TRUE\n\n#|eval:true \n#|echo:true\n\n\n\n\nTidy data\nTidy data is a format that organizes data in a specific structure.\nEach column represents a variable\nEach row represents an observation\nEach cell represents a value\nI will display this using the exercises from the text book\nHint: Remember to load dyplr and set eval & echo to true to display the code and output ( you should’ve learned this from my week 3 blog)\n\n#Load all of the packages using the library function\n\nlibrary(tidyverse) \n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.0     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.1     ✔ tibble    3.2.0\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.1     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the \u001b]8;;http://conflicted.r-lib.org/\u0007conflicted package\u001b]8;;\u0007 to force all conflicts to become errors\n\nlibrary(patchwork) \nlibrary(ggthemes)  \nlibrary(lubridate) \nlibrary(knitr)\nlibrary(kableExtra)\n\n\nAttaching package: 'kableExtra'\n\nThe following object is masked from 'package:dplyr':\n\n    group_rows\n\n\n1) Read in the data set\n\n#Read in the data set for the exercise and save it to the survey_data\n\nsurvey_data <- read_csv(\"https://psyteachr.github.io/ads-v2/data/survey_data.csv\")\n\nRows: 707 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (3): caller_id, employee_id, issue_category\ndbl  (3): wait_time, call_time, satisfaction\ndttm (1): call_start\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n#|eval:true\n#|echo:false\n\n2)View the top of the data set\n\n#See what the data looks like using head function \n\nhead(survey_data)\n\n# A tibble: 6 × 7\n  caller_id employee_id call_start          wait_time call_time issue_…¹ satis…²\n  <chr>     <chr>       <dttm>                  <dbl>     <dbl> <chr>      <dbl>\n1 C001      E01         2020-09-22 10:47:54       169        34 tech           3\n2 C002      E01         2020-09-07 22:10:25       206        52 tech           2\n3 C003      E01         2020-07-06 12:08:59       207        41 tech           2\n4 C004      E01         2020-02-20 13:12:03       132        16 tech           4\n5 C005      E01         2020-11-08 17:42:10       178        20 returns        3\n6 C006      E01         2020-06-01 19:06:12       230        46 returns        2\n# … with abbreviated variable names ¹​issue_category, ²​satisfaction\n\n#This would be considered a tidy data because each column represents a variable, rows are observation and each cell is a value.\n#|eval:true\n#|echo:true\n\n3)Change the column type, make data more concise\n\n#Change column types \n\nsurvey_col_types <- cols(\n  caller_id = col_character(),\n  employee_id = col_character(),\n  call_start = col_datetime(format = \"\"),\n  wait_time = col_double(),\n  call_time = col_double(),\n  issue_category = col_factor(levels = c(\"tech\", \"sales\", \"returns\", \"other\")), #Update this column to make the issue clear to viewers \n  satisfaction = col_integer()\n)\n\n# We have to re-import the data because it is updated \nsurvey_data <- read_csv(\"https://psyteachr.github.io/ads-v2/data/survey_data.csv\",\n                        col_types = survey_col_types)\n\n\n#Call the head of the graph and use the spec function to view updated column types \n\nspec(survey_data)   #Using spec() function to see column types \n\ncols(\n  caller_id = col_character(),\n  employee_id = col_character(),\n  call_start = col_datetime(format = \"\"),\n  wait_time = col_double(),\n  call_time = col_double(),\n  issue_category = col_factor(levels = c(\"tech\", \"sales\", \"returns\", \"other\"), ordered = FALSE, include_na = FALSE),\n  satisfaction = col_integer()\n)\n\nhead(survey_data)   #Using head function to view the changes \n\n# A tibble: 6 × 7\n  caller_id employee_id call_start          wait_time call_time issue_…¹ satis…²\n  <chr>     <chr>       <dttm>                  <dbl>     <dbl> <fct>      <int>\n1 C001      E01         2020-09-22 10:47:54       169        34 tech           3\n2 C002      E01         2020-09-07 22:10:25       206        52 tech           2\n3 C003      E01         2020-07-06 12:08:59       207        41 tech           2\n4 C004      E01         2020-02-20 13:12:03       132        16 tech           4\n5 C005      E01         2020-11-08 17:42:10       178        20 returns        3\n6 C006      E01         2020-06-01 19:06:12       230        46 returns        2\n# … with abbreviated variable names ¹​issue_category, ²​satisfaction\n\n#|eval:true\n#|echo:true\n\nNow that I have the updated columns and the table is in the correct format , I can now make a gg plot.\n\n\n\nGG Plot\n\n#Call ggplot to get blank canvas \nggplot()\n\n\n\n#Edit GG plot to add details to the graph \n\n#Aesthetics used to add axis titles to the graph \n\nggplot(survey_data, aes(x = issue_category,fill=issue_category)) +\n  geom_bar()\n\n\n\n#|eval:true\n#|echo:true\n\nThis is a basic plot demonstrating the amount of issues that the customers had. I can conclude that the customers had the most issues with technology amongst other problems\nCheck out my Blog 5 for more complex graphs.\nBye for now !"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Alexus Quarto blog (Assignment 1)",
    "section": "",
    "text": "Fifth Blog Post\n\n\n\n\n\n\n\nnews\n\n\ncode\n\n\nanalysis\n\n\n\n\n\n\n\n\n\n\n\nMar 29, 2023\n\n\nAlexus Lawrence\n\n\n\n\n\n\n  \n\n\n\n\nFourth Blog Post\n\n\n\n\n\n\n\nnews\n\n\ncode\n\n\nanalysis\n\n\n\n\n\n\n\n\n\n\n\nMar 29, 2023\n\n\nAlexus Lawrence\n\n\n\n\n\n\n  \n\n\n\n\nThird Blog Post\n\n\n\n\n\n\n\nnews\n\n\ncode\n\n\nanalysis\n\n\n\n\n\n\n\n\n\n\n\nMar 26, 2023\n\n\nAlexus Lawrence\n\n\n\n\n\n\n  \n\n\n\n\nThird Blog Post\n\n\n\n\n\n\n\nnews\n\n\ncode\n\n\nanalysis\n\n\n\n\n\n\n\n\n\n\n\nMar 2, 2023\n\n\nAlexus Lawrence\n\n\n\n\n\n\n  \n\n\n\n\nSixth Blog Post\n\n\n\n\n\n\n\nnews\n\n\ncode\n\n\nanalysis\n\n\n\n\n\n\n\n\n\n\n\nMar 2, 2023\n\n\nAlexus Lawrence\n\n\n\n\n\n\n  \n\n\n\n\nSecond Blog Post\n\n\n\n\n\n\n\nnews\n\n\ncode\n\n\nanalysis\n\n\n\n\n\n\n\n\n\n\n\nFeb 14, 2023\n\n\nAlexus Lawrence\n\n\n\n\n\n\n  \n\n\n\n\nFirst Blog Post\n\n\n\n\n\n\n\nnews\n\n\ncode\n\n\nanalysis\n\n\n\n\n\n\n\n\n\n\n\nFeb 6, 2023\n\n\nAlexus Lawrence\n\n\n\n\n\n\n  \n\n\n\n\nWelcome To My Blog\n\n\n\n\n\n\n\nnews\n\n\n\n\n\n\n\n\n\n\n\nFeb 3, 2023\n\n\nTristan O’Malley\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/Fourth Post /index.html#datatypes",
    "href": "posts/Fourth Post /index.html#datatypes",
    "title": "Fourth Blog Post",
    "section": "Datatypes",
    "text": "Datatypes\nData types by definition are data represented by an object; Examples included integers, double, character, logical and complex (numbers with real and imaginary parts). Additionally these numbers can integers and doubles (numeric).\nIntegers are : 2,3,4\nDoubles are : 12,15,19\nCharacters are:\nCharacters are text that can be shown as a string (must be enclosed by quotation marks)\nFor example\n\ntypeof(\"cheese\")\n\n[1] \"character\"\n\n#|eval:true \n#|echo:true\n\nThis works with integers as well (if an integer has quotation marks surrounding it , it is then considered a character), see example below\n\ntypeof(\"1\")\n\n[1] \"character\"\n\ntypeof(\"4\")\n\n[1] \"character\"\n\n#|eval:true \n#|echo:true\n\nLogical statements are :\nLogical statements are True and False , they are also referred to as Boolean. See the example below.\nWhen using the as.logical function , 0 represents the false value and the 1 value represents the true value. See the example below\n\nrandomdance<-list(\n  words=\"shake\",\"my\",\"foot\"\n)\n\nrandomdance=as.logical(0)  #Set random dance list to false values \n  \nstr(randomdance)          #call random dance using str and output value \n\n logi FALSE\n\nrandomdance=as.logical(1)  #Set random dance list to true value \n\nstr(randomdance)         #call random dance using str and output true value\n\n logi TRUE\n\n#|eval:true \n#|echo:true"
  },
  {
    "objectID": "posts/Fourth Post /index.html#tidy-data",
    "href": "posts/Fourth Post /index.html#tidy-data",
    "title": "Fourth Blog Post",
    "section": "Tidy data",
    "text": "Tidy data\nTidy data is a format that organizes data in a specific structure.\nEach column represents a variable\nEach row represents an observation\nEach cell represents a value\nI will display this using the exercises from the text book\nHint: Remember to load dyplr and set eval & echo to true to display the code and output ( you should’ve learned this from my week 3 blog)\n\n#Load all of the packages using the library function\n\nlibrary(tidyverse) \n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.0     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.1     ✔ tibble    3.2.0\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.1     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the \u001b]8;;http://conflicted.r-lib.org/\u0007conflicted package\u001b]8;;\u0007 to force all conflicts to become errors\n\nlibrary(patchwork) \nlibrary(ggthemes)  \nlibrary(lubridate) \nlibrary(knitr)\nlibrary(kableExtra)\n\n\nAttaching package: 'kableExtra'\n\nThe following object is masked from 'package:dplyr':\n\n    group_rows\n\n\nRead in the data set\n\n#Read in the data set for the exercise and save it to the survey_data\n\nsurvey_data <- read_csv(\"https://psyteachr.github.io/ads-v2/data/survey_data.csv\")\n\nRows: 707 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (3): caller_id, employee_id, issue_category\ndbl  (3): wait_time, call_time, satisfaction\ndttm (1): call_start\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n#See what the data looks like using head function \n\nhead(survey_data)\n\n# A tibble: 6 × 7\n  caller_id employee_id call_start          wait_time call_time issue_…¹ satis…²\n  <chr>     <chr>       <dttm>                  <dbl>     <dbl> <chr>      <dbl>\n1 C001      E01         2020-09-22 10:47:54       169        34 tech           3\n2 C002      E01         2020-09-07 22:10:25       206        52 tech           2\n3 C003      E01         2020-07-06 12:08:59       207        41 tech           2\n4 C004      E01         2020-02-20 13:12:03       132        16 tech           4\n5 C005      E01         2020-11-08 17:42:10       178        20 returns        3\n6 C006      E01         2020-06-01 19:06:12       230        46 returns        2\n# … with abbreviated variable names ¹​issue_category, ²​satisfaction\n\n#This would be considered a tidy data because each column represents a variable, rows are observation and each cell is a value.\n#|eval:true\n#|echo:true\n\n\n#Change column types \n\nsurvey_col_types <- cols(\n  caller_id = col_character(),\n  employee_id = col_character(),\n  call_start = col_datetime(format = \"\"),\n  wait_time = col_double(),\n  call_time = col_double(),\n  issue_category = col_factor(levels = c(\"tech\", \"sales\", \"returns\", \"other\")), #Update this column to make the issue clear to viewers \n  satisfaction = col_integer()\n)\n\n# We have to re-import the data because it is updated \nsurvey_data <- read_csv(\"https://psyteachr.github.io/ads-v2/data/survey_data.csv\",\n                        col_types = survey_col_types)\n\n\n#Call the head of the graph and use the spec function to view updated column types \n\nspec(survey_data)   #Using spec() function to see column types \n\ncols(\n  caller_id = col_character(),\n  employee_id = col_character(),\n  call_start = col_datetime(format = \"\"),\n  wait_time = col_double(),\n  call_time = col_double(),\n  issue_category = col_factor(levels = c(\"tech\", \"sales\", \"returns\", \"other\"), ordered = FALSE, include_na = FALSE),\n  satisfaction = col_integer()\n)\n\nhead(survey_data)   #Using head function to view the changes \n\n# A tibble: 6 × 7\n  caller_id employee_id call_start          wait_time call_time issue_…¹ satis…²\n  <chr>     <chr>       <dttm>                  <dbl>     <dbl> <fct>      <int>\n1 C001      E01         2020-09-22 10:47:54       169        34 tech           3\n2 C002      E01         2020-09-07 22:10:25       206        52 tech           2\n3 C003      E01         2020-07-06 12:08:59       207        41 tech           2\n4 C004      E01         2020-02-20 13:12:03       132        16 tech           4\n5 C005      E01         2020-11-08 17:42:10       178        20 returns        3\n6 C006      E01         2020-06-01 19:06:12       230        46 returns        2\n# … with abbreviated variable names ¹​issue_category, ²​satisfaction\n\n#|eval:true\n#|echo:true\n\nNow that I have the updated columns and the table is in the correct format , I can now make a gg plot."
  },
  {
    "objectID": "posts/Fourth Post /index.html#gg-plot",
    "href": "posts/Fourth Post /index.html#gg-plot",
    "title": "Fourth Blog Post",
    "section": "GG Plot",
    "text": "GG Plot\n\n#Call ggplot to get blank canvas \nggplot()\n\n\n\n#|eval:true\n#|echo:true"
  },
  {
    "objectID": "posts/Fifth Post /index.html",
    "href": "posts/Fifth Post /index.html",
    "title": "Fifth Blog Post",
    "section": "",
    "text": "Today, I will be demonstrating to you my knowledge on data import.\nThe main goals of this blog post are :\n1)Show that I understand the major topics of this chapter including set up, viewing data and so much more!\n2)Demonstrate my understanding of the specific chapters titled “built in data” and “writing data”\nTo demonstrate this I will be completing the exercised assigned in the text book\n\n\n\nData import is the act of bringing in data and assessing it"
  },
  {
    "objectID": "posts/Fifth Post /index.html#load-the-package",
    "href": "posts/Fifth Post /index.html#load-the-package",
    "title": "Fifth Blog Post",
    "section": "Load the package",
    "text": "Load the package\nFirst, I am going to load the necessary packages needed for this exercise, as we do in every post.\n\n#Load Packages \n\nlibrary(rio)\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.0     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.1     ✔ tibble    3.2.0\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.1     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the \u001b]8;;http://conflicted.r-lib.org/\u0007conflicted package\u001b]8;;\u0007 to force all conflicts to become errors"
  },
  {
    "objectID": "posts/Fifth Post /index.html#import-the-data",
    "href": "posts/Fifth Post /index.html#import-the-data",
    "title": "Fifth Blog Post",
    "section": "Import the data",
    "text": "Import the data\nNext, I want to import the data and be aware of the data set that I am using. In this case Star wars is an already built-in data set, so I can use data(starwars) to import the data\n\n#Import data frame/already built in \ndata(\"starwars\")\n\n#Export the data \n#To export the data that is already built in you will follow export(the name of data frame (previously assigned), the csv file and where). For this example it will look like this\n\nexport(starwars,\"data/starwars.csv\")\n\n\n#After exporting the data, I now have to import the data using read_csv. The instructions also states that I should assign the pathway to the object starwars.  \n\nstarwars<-read_csv(\"data/starwars.csv\")\n\nRows: 87 Columns: 14\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (11): name, hair_color, skin_color, eye_color, sex, gender, homeworld, s...\ndbl  (3): height, mass, birth_year\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nFor the sake of the assignment I will use read_csv as directed but I also wanted to show you how to use rio::import to the csv file.\n\nstarwars_csv<- import(\"data/starwars.csv\")  # comma-separated values\n\n#|echo:true\n#|eval:true\n\nI’m going to reload the variables set above for the assignment\n\ndata(\"starwars\")\nexport(starwars,\"data/starwars.csv\")\nstarwars<-read_csv(\"data/starwars.csv\")\n\nRows: 87 Columns: 14\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (11): name, hair_color, skin_color, eye_color, sex, gender, homeworld, s...\ndbl  (3): height, mass, birth_year\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n#|echo:true\n#|eval:true\n\n##View the data\nNow that I’ve imported and exported the data , I would like to view it and see what is included in the data set. Using the view function I will view the data and it will output\nYou can view it in the console pane but I won’t put it in the script because of the pop up. Instead I will provide a screenshot of the output.\n\nlibrary(knitr)\n#When using view(starwars), it will show the data in a grid-like fashion \n\n\n\nknitr::include_graphics(\"/Users/Alexus/Desktop/Screenshot of View function.png\")\n\n\n\n#|echo:true\n#|eval:true\n\n##Print\nPrint data should be used in the console and will print out only the first ten rows of the data.\n##Glimpse\nThe glimpse() function is used to show the columns as rows , this is a sideway view which is beneficial because some of the data has a lot of columns.\n\nglimpse(starwars)\n\nRows: 87\nColumns: 14\n$ name       <chr> \"Luke Skywalker\", \"C-3PO\", \"R2-D2\", \"Darth Vader\", \"Leia Or…\n$ height     <dbl> 172, 167, 96, 202, 150, 178, 165, 97, 183, 182, 188, 180, 2…\n$ mass       <dbl> 77.0, 75.0, 32.0, 136.0, 49.0, 120.0, 75.0, 32.0, 84.0, 77.…\n$ hair_color <chr> \"blond\", NA, NA, \"none\", \"brown\", \"brown, grey\", \"brown\", N…\n$ skin_color <chr> \"fair\", \"gold\", \"white, blue\", \"white\", \"light\", \"light\", \"…\n$ eye_color  <chr> \"blue\", \"yellow\", \"red\", \"yellow\", \"brown\", \"blue\", \"blue\",…\n$ birth_year <dbl> 19.0, 112.0, 33.0, 41.9, 19.0, 52.0, 47.0, NA, 24.0, 57.0, …\n$ sex        <chr> \"male\", \"none\", \"none\", \"male\", \"female\", \"male\", \"female\",…\n$ gender     <chr> \"masculine\", \"masculine\", \"masculine\", \"masculine\", \"femini…\n$ homeworld  <chr> \"Tatooine\", \"Tatooine\", \"Naboo\", \"Tatooine\", \"Alderaan\", \"T…\n$ species    <chr> \"Human\", \"Droid\", \"Droid\", \"Human\", \"Human\", \"Human\", \"Huma…\n$ films      <chr> \"The Empire Strikes Back|Revenge of the Sith|Return of the …\n$ vehicles   <chr> \"Snowspeeder|Imperial Speeder Bike\", NA, NA, NA, \"Imperial …\n$ starships  <chr> \"X-wing|Imperial shuttle\", NA, NA, \"TIE Advanced x1\", NA, N…\n\n#|echo:true\n#|eval:true\n\n##Summary\nThe summary() function gives us an overview of the data , specifically for values such as mean , medium , maximum and so forth. This is useful for interpreting if R mistook certain values as integers.\n\nsummary(starwars)\n\n     name               height           mass          hair_color       \n Length:87          Min.   : 66.0   Min.   :  15.00   Length:87         \n Class :character   1st Qu.:167.0   1st Qu.:  55.60   Class :character  \n Mode  :character   Median :180.0   Median :  79.00   Mode  :character  \n                    Mean   :174.4   Mean   :  97.31                     \n                    3rd Qu.:191.0   3rd Qu.:  84.50                     \n                    Max.   :264.0   Max.   :1358.00                     \n                    NA's   :6       NA's   :28                          \n  skin_color         eye_color           birth_year         sex           \n Length:87          Length:87          Min.   :  8.00   Length:87         \n Class :character   Class :character   1st Qu.: 35.00   Class :character  \n Mode  :character   Mode  :character   Median : 52.00   Mode  :character  \n                                       Mean   : 87.57                     \n                                       3rd Qu.: 72.00                     \n                                       Max.   :896.00                     \n                                       NA's   :44                         \n    gender           homeworld           species             films          \n Length:87          Length:87          Length:87          Length:87         \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n                                                                            \n   vehicles          starships        \n Length:87          Length:87         \n Class :character   Class :character  \n Mode  :character   Mode  :character  \n                                      \n                                      \n                                      \n                                      \n\n#|echo:true\n#|eval:true\n\n###Return back to assignment (Changing column type and graph)\nIn this part of the assignment, I will change the column types inside of the data.\nDirections: Convert the columns hair_color, skin_color, eye_color, sex, gender, homeworld, and species to col(factor)\nFirst : I am going to use the spec function so that I can view the current variable types.\nSecond: Re-import the data file with the corrected variable types so that it is updated\n\nspec(starwars)\n\ncols(\n  name = col_character(),\n  height = col_double(),\n  mass = col_double(),\n  hair_color = col_character(),\n  skin_color = col_character(),\n  eye_color = col_character(),\n  birth_year = col_double(),\n  sex = col_character(),\n  gender = col_character(),\n  homeworld = col_character(),\n  species = col_character(),\n  films = col_character(),\n  vehicles = col_character(),\n  starships = col_character()\n)\n\ncorrected_cols<-cols(\n  name = col_character(),\n  height = col_double(),\n  mass = col_double(),\n  hair_color = col_factor(),\n  skin_color = col_factor(),\n  eye_color = col_factor(),\n  birth_year = col_double(),\n  sex = col_factor(),\n  gender = col_factor(),\n  homeworld = col_factor(),\n  species = col_factor(),\n  films = col_character(),\n  vehicles = col_character(),\n  starships = col_character()\n)\n\nstarwars <- read_csv(\"data/starwars.csv\", col_types = corrected_cols)\n#|echo:true\n#|eval:true\n\n###Writing in data\nLastly, I will be demonstrating my knowledge of writing data by creating a table that includes my completed and missing assignments. Completing assignment has been very hard for me with personal life but it’s ok .. this table will help me visually see it.\n\nassignments_completed<-tibble(\n  assignments = c(\"Assignment 5\", \"Assignment 6\", \"Assignment 7-9\",\"Midterm 1\"),\n  completed = c(\"completed\", \"not completed\", \"not completed\",\"not completed\"),\n)\n\nview(assignments_completed)\n\n#Below I will show a screenshot of this table \n\n#I am using file.choose() as a shortcut to find the path of my document \n\nknitr::include_graphics(\"/Users/Alexus/Desktop/Assignments completion table.png\")\n\n\n\n#|echo:true\n#|eval:true\n\nThat is all for my post today, chao!!"
  }
]