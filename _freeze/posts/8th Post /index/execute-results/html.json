{
  "hash": "d745955defa7d23005f640fbee376892",
  "result": {
    "markdown": "---\ntitle: \"Eighth Blog Post \"\nauthor: \"Alexus Lawrence\"\ndate: \"2023-03-29\"\ncategories: [news, code, analysis]\nimage: \"image.jpg\"\n---\n\n\n## Hello welcome to my Eighth blog post !\n\nIn today's post you will learn how to use functions such as **mutating joins, binding joins, set operations and conflicting variable data types**\n\nThis will be easy as long as you tag along with me and complete the exercise as I demonstrate.\n\nLet's start !\n\n# Exercise\n\nFor today's exercise we will be using \"Grade Data\" from the University of Glasgow.\n\nThere are different exercises attached to this assignment and I will provide the instructions as we navigate this assignment together.\n\nBefore we start lets load the package we need (tidyverse)\n\n# Load Package\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.2     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.1     ✔ tibble    3.2.0\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.1     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the \u001b]8;;http://conflicted.r-lib.org/\u0007conflicted package\u001b]8;;\u0007 to force all conflicts to become errors\n```\n:::\n:::\n\n\nOkay! We have that loaded , let's continue !\n\nNext we have to download the data and then load it.\n\nI downloaded the data now let's read it in.\n\n# Read in data (Exercise 1)\n\n**Directions for exercise 1:**\n\n1)Read in schedule A.Csv and save it to an object named schedule 2) Read in grade_1.csv and save it to an object named grades 1 3)Read in grade_data2.csv and save it to an object named grades 2\n\nLet's do it !\n\n\n::: {.cell}\n\n```{.r .cell-code}\nschedule<- read.csv(\"/Users/Alexus/Downloads/scheduleA.csv\")\ngrades1<- read.csv(\"/Users/Alexus/Downloads/grade_data1.csv\")\ngrades2<- read.csv(\"/Users/Alexus/Downloads/grade_data2.csv\")\n```\n:::\n\n\nWe did it !!!!\n\nNow let's get on to the next task\n\n# Grade Data (Exercise 1)\n\n**Exercise 2 explanation of data**\n\nGUID is an id for all students of the U of G. With that ID but the id will be combined with the initial of your first name. For example, if my id was 987643 and my name is alexus , so my id would look like 987643a , this will cause confusion because grade1 contains numeric values while grade 2 has a letter.\n\nThe chapter helped us out by handling the situation with the given code below (I will right notes so that you understand what is going on)\n\n**Change column of grades 1 data type to remove letters**\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngrades1 <- grades1 %>%\n  mutate(id = str_replace_all(\n    id, # above you can see the mutate function which helps with changing the data that you want to change , the id column is inside the grades 1 data set, so we are selecting it \n    pattern = \"[a-z]\", # the function pattern is searching for all the letters , here the a-z is used so it is going to search for all the letters of the alphabet within the id column \n    replacement = \"\" # here we are using the replacement function so that we can replace the letters, there is blank space inside of the quotation marks because we want to replace it with nothing \n  ))  \n```\n:::\n\n\n**Directions for exercise 2**\n\nNow that we have replaced the letters with nothing , the next exercise is to change the data type of id so that it matches grades 2 type which is numeric. So let's do it !\n\nI want to see what my data looks like first before I change it, I'm going to view it , ill be right back!\n\nhint: You can use the glimpse function for a quick view but I personally like to view my data fully so that I understand , do what works for you!\n\nOK now that I seen my data, I realize that the letters are removed, lets change the data type of grades 1 to numeric , this is easy , I taught you about mutate and the as.numeric function in previous post but I'll still explain\n\nlet's go!\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngrades1<- grades1%>% #We are changing or \"mutating\" from this data type so we have to select it , the pipe symbol is simply so that we can continue and grab the column (\"and then\" remember)\n  \nmutate(id=as.numeric(id)) # here we are mutating the column id , we use the as numeric function to change it from non-numeric to numeric \n```\n:::\n\n\nNow that we did that , let's view the data, this time I am going to use the glimpse function.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(grades1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 100\nColumns: 3\n$ assessment <chr> \"Exam\", \"Exam\", \"Exam\", \"Exam\", \"Exam\", \"Exam\", \"Exam\", \"Ex…\n$ id         <dbl> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, …\n$ Points     <int> NA, 16, 12, 15, 16, NA, 16, 13, 15, NA, 19, NA, 16, 18, NA,…\n```\n:::\n:::\n\n\nLooking good !! Next task , lets go!\n\n# Complete Records (Exercise 3)\n\n **Direction for exercise 3:**\n\nFor this exercise, we are assigned to join the grade data to schedule a , this is so that we can see the grade point and grade for each student. However, there is a twist , some of the students have missing grades , which will most likely be labeled \"NA\" to represent the missing data; we have to include those with missing grades as well, it's OK lets do it !\n\n1)Join grades 1 and schedule A, label it exam_all 2)Join grades 2 and save it in essay_all 3)Both exam_all and essay_all should have 4, variables and 100 observations\n\n **Left Join**\n\n**Left Join** is a function in which we join tables from the left to match the right. In this case we are joining grades 1 (left) , grades 2(left) to match the schedule (right). When using left_join you must understand the format.\n\nIt gets complicated but I'll explain in the comments , let's start.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# for the left_join format it goes like this \n#left_join(the left table, the right table (what you want to join), by= which is what you want them to be joined by, in this case it is the points)\nexam_all<- left_join(grades1, schedule, by=\"Points\")\nessay_all<- left_join(grades2, schedule, by=\"Points\")\n```\n:::\n\n\nNice! \n\n# Missing data (Exercise 4)\n\nIn this section I am asked questions about the data set and I will answer below \n\n**Questions for exercise 4 **\n\n1) How many exam grades are missing?\n2)How many essay grades are missing ?\n\nFor me to answer these questions, I first need to get a summary of my data as instructed in the exercise. Let's do it !\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(exam_all)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  assessment              id             Points        Grade          \n Length:100         Min.   :  1.00   Min.   :10.0   Length:100        \n Class :character   1st Qu.: 25.75   1st Qu.:14.0   Class :character  \n Mode  :character   Median : 50.50   Median :16.0   Mode  :character  \n                    Mean   : 50.50   Mean   :15.7                     \n                    3rd Qu.: 75.25   3rd Qu.:17.0                     \n                    Max.   :100.00   Max.   :22.0                     \n                                     NA's   :17                       \n```\n:::\n\n```{.r .cell-code}\nsummary(essay_all)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n       id             Points      assessment           Grade          \n Min.   :  1.00   Min.   : 7.0   Length:100         Length:100        \n 1st Qu.: 25.75   1st Qu.:12.0   Class :character   Class :character  \n Median : 50.50   Median :14.0   Mode  :character   Mode  :character  \n Mean   : 50.50   Mean   :13.7                                        \n 3rd Qu.: 75.25   3rd Qu.:16.0                                        \n Max.   :100.00   Max.   :19.0                                        \n                  NA's   :23                                          \n```\n:::\n:::\n\n**Answers for Exercise 4 question**\n\nThe summaries of the objects gave me the number of NA'S as you can see above, so lets answer the questions \n\n1)There are 17 missing exam grades \n2)There are 23 missing essay grades \n\n\n**Directions for exercise 4 pt 2 task**\n\nFor the second task of exercise 4 , we are asked to create an object that joins together grades 1 and schedule , however , they would only like that we include those students who have a grade, we should do the same for grades 2 as well but save it to an object called essay_grades. \n\n**Before this task we are asked to answer two questions**\n\n1)How many observations should exam_grades have?\n2)How many observations should essay_grades have?\n\nTo answer this questions all I need to do is subtract the number of missing values (#number of 'NA') that each object contains from the number of initial observations (100)\n\nLet's do it \n\n**Answers to exercise 4 pt 2 questions**\n\n**Exam grades** : 100-17= 83, therefore there should be 83 observations for exams after I complete the join task.\n**Essay grades** : 100-23=77 therefore there should be 77 observations for essays after I complete the join task.\n\n\nNow that we answered those questions lets get into the task.\n\nI have to create an object under exam_grades that joins grade 1 and schedule but only with students who have a grade and do the same for essay & store it under essay_grades. \n\nIf I want to exclude the students that don't have a grade , the best function to use is **inner_join** . **Inner Join** is a mutating join function in which it only returns rows that have a match in each of the tables. The missing values will be excluded because there are only matching values for the students with grades. Let's try it \n\nhint: The inner join function is formatted the same as the left join function that I showed you in that section , feel free to review it.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nexam_grades<- inner_join(grades1, schedule, by=\"Points\") #setting exam_grades as an object to the joined grades and schedule \n\nessay_grades<- inner_join(grades2, schedule, by=\"Points\") #setting essay_grades as an object to the joined grades and schedule \n```\n:::\n\n\nGreat! The number of observations matched the expected number of observations, that means that i did it correct, hooray!\n\n**Exercise 4 pt 3**\n\n**Directions for Exercise 4 pt 3:**\nFor pt 3 of exercise 4, we are instructed to create data set titled 'completes' which joins the grades for the students who have a grade for the essay and exam. \n\nWe are advised that for the essay_grades and exam_grades they have variables Assessment,Points and Grades which are the same variables but in each object they contain different data. \n\nWe are asked to change the suffix to the names point_exam and point_essay respectively and then select for id, grade_exam and grade_essay. \n\n\nTruthfully, I do not know how to do this , so I will read the parts of the chapter that I need and use Google as well, I'll be back ! \n\n\nI'm back ! \n\nBased on the reading and googling \n\nIt seems that we still need the inner_join function because it will join the variables that match in both the exam _grades and exam_grades objects. Within the inner_join function we will need to use a function called suffix which apparently is used to change the suffix of a value in the table. Lastly, to select for the desired values (id, grade_exam & grade_essay), we will use the function select which helps to select specific values. \n\nLet's do it !\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncompletes<- inner_join(exam_grades,essay_grades, #Here I am making a data set called completes as instructed and then I used the inner join function to join the objects (exam&essay grades)\n by = \"id\", #similar to the left_join function , I am asking the objects to be joined by id\n suffix = c(\"exam\", \"essay\"))%>% #here I use the function suffix to replace the suffix so that they join , followed by the pipe symbol (and then) which helps tell the function what they should do after , in this case it is to select \n select(id, Gradeexam, Gradeessay)\n                       #I used the select functions to select the specific values of id,grade_exam and grade_essay as instructed\n```\n:::\n\n\n**ERROR Warning:** I received an error about the columns Grade_exam and Grade_essay not existing. At first I was puzzled and didn't know what to do but I decided to take a view of the data and R is right , they don't exist, however, Gradeexam and Gradeessay does. This is because in the exercise directions it mistakenly uses the underscore between the words in the column labels but in the data it exists together , be careful. \n\n\n**Exercise 4 pt 3 question**\n\nWe are asked one question regarding the 'complete' data set that I just created. \n\nHow many students have a grade for both the exam and the essay ? \n\nTo answer this question you can simply look at the number of observation included in the completes data set or you can use a summary of the completes data set. Let's do both \n\n\n**Answer for exercise 4 pt 3 answers**\n\nBased on the observation it says that there are 62 observations , therefore there are 62 students with both an exam and essay grade. Let's use the summary function to confirm. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(completes)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n       id          Gradeexam          Gradeessay       \n Min.   :  2.00   Length:62          Length:62         \n 1st Qu.: 33.25   Class :character   Class :character  \n Median : 52.50   Mode  :character   Mode  :character  \n Mean   : 53.76                                        \n 3rd Qu.: 76.50                                        \n Max.   :100.00                                        \n```\n:::\n:::\n\nIt is confirmed! The summary also mentions that the length is 62 (there are 62 students with both grades respectively )\n\n\n\n**Exercise 4 pt 4 **\n\nFor exercise 4 pt 4 we are instructed to create a data set labeled 'no essay' that contains students that have a grade for the exam but not the essay and then vice versa but label the second no_exam. \n\nThis is pretty easy because in the reading there were only two types of filtering joins which was the semi_join and anti_join function , the **anti join function** is the only function out of the two that returns the rows that are not matching. You have to be careful because order matters, therefore you must be specific about the data that you want to anti join , you can do this for both left and right tables respectively, ill show you below. \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nno_essay<- anti_join(exam_grades,essay_grades, by=\"id\")\n# I am assigning the data set to 'no_essay' as instructed and then I use exam grades as my left table and essay grades as my right table and then 'anti-join' them by the id because that is how we identify the student \n```\n:::\n\n\nNow let's do the same for the exam \n\n\n::: {.cell}\n\n```{.r .cell-code}\nno_exam<- anti_join(essay_grades,exam_grades, by=\"id\") #it is the same as above\n```\n:::\n\n\nLet's glimpse both data sets before we answer the questions related to them. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(no_essay)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 21\nColumns: 4\n$ assessment <chr> \"Exam\", \"Exam\", \"Exam\", \"Exam\", \"Exam\", \"Exam\", \"Exam\", \"Ex…\n$ id         <dbl> 4, 8, 11, 13, 17, 18, 19, 20, 30, 35, 37, 55, 61, 64, 69, 7…\n$ Points     <int> 15, 13, 19, 16, 16, 13, 16, 13, 12, 16, 12, 14, 11, 13, 19,…\n$ Grade      <chr> \"B3\", \"C2\", \"A4\", \"B2\", \"B2\", \"C2\", \"B2\", \"C2\", \"C3\", \"B2\",…\n```\n:::\n\n```{.r .cell-code}\nglimpse(no_exam)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 15\nColumns: 4\n$ id         <int> 1, 10, 12, 15, 22, 24, 27, 49, 66, 67, 76, 84, 89, 92, 93\n$ Points     <int> 12, 14, 17, 18, 11, 10, 12, 10, 13, 17, 15, 14, 16, 12, 13\n$ assessment <chr> \"Essay\", \"Essay\", \"Essay\", \"Essay\", \"Essay\", \"Essay\", \"Essa…\n$ Grade      <chr> \"C3\", \"C1\", \"B1\", \"A5\", \"D1\", \"D2\", \"C3\", \"D2\", \"C2\", \"B1\",…\n```\n:::\n:::\n\nBeautiful! \n\nNow let's answer the questions \n\n**Questions for exercise 4 pt 4**\n\n1) How many students have a grade for the exam but not the essay?\n2) How many students have a grade for the essay but not the exam?\n\n\n**Answers for exercise 4 pt 4**\nThis is easy to answer using the observation and the summary , let's use both. \n\nFor the no_essay data set , there are 21 observations therefore 21 students completed the exam but no essay. For the no_exam data set there are 15 observations , therefore 15 students completed the essay but not the exam. \n\nLet's confirm this with the summary function and then we will be done. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(no_essay)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  assessment              id         Points         Grade          \n Length:21          Min.   : 4   Min.   :11.00   Length:21         \n Class :character   1st Qu.:18   1st Qu.:13.00   Class :character  \n Mode  :character   Median :37   Median :15.00   Mode  :character  \n                    Mean   :45   Mean   :14.86                     \n                    3rd Qu.:71   3rd Qu.:16.00                     \n                    Max.   :88   Max.   :19.00                     \n```\n:::\n\n```{.r .cell-code}\nsummary(no_exam)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n       id            Points      assessment           Grade          \n Min.   : 1.00   Min.   :10.0   Length:15          Length:15         \n 1st Qu.:18.50   1st Qu.:12.0   Class :character   Class :character  \n Median :49.00   Median :13.0   Mode  :character   Mode  :character  \n Mean   :48.47   Mean   :13.6                                        \n 3rd Qu.:80.00   3rd Qu.:15.5                                        \n Max.   :93.00   Max.   :18.0                                        \n```\n:::\n:::\n\n\nConfirmed!\n\n\nThat was a lot of work , but we got through it. \n\nChao!\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}