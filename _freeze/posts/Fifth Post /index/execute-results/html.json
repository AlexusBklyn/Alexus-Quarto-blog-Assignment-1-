{
  "hash": "5d7c8176de6fd64c89d9d5d29d9fdf09",
  "result": {
    "markdown": "---\ntitle: \"Fifth Blog Post \"\nauthor: \"Alexus Lawrence\"\ndate: \"2023-03-29\"\ncategories: [news, code, analysis]\nimage: \"image.jpg\"\n---\n\n\n## Hello welcome to my fifth blog post !\n\nToday, I will be demonstrating to you my knowledge on data import.\n\n**The main goals of this blog post are :**\n\n1)Show that I understand the major topics of this chapter including set up, viewing data and so much more!\n\n2)Demonstrate my understanding of the specific chapters titled \"built in data\" and \"writing data\"\n\n**To demonstrate this I will be completing the exercised assigned in the text book**\n\n------------------------------------------------------------------------\n\n### Data Import\n\n**Data import is the act of bringing in data and assessing it**\n\n------------------------------------------------------------------------\n\n## Load the package \n\nFirst, I am going to load the necessary packages needed for this exercise, as we do in every post.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#Load Packages \n\nlibrary(rio)\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.0     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.1     ✔ tibble    3.2.0\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.1     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the \u001b]8;;http://conflicted.r-lib.org/\u0007conflicted package\u001b]8;;\u0007 to force all conflicts to become errors\n```\n:::\n:::\n\n\n\n## Import the data\n\nNext, I want to import the data and be aware of the data set that I am using. In this case **Star wars** is an already built-in data set, so I can use **data(starwars)** to import the data \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#Import data frame/already built in \ndata(\"starwars\")\n\n#Export the data \n#To export the data that is already built in you will follow export(the name of data frame (previously assigned), the csv file and where). For this example it will look like this\n\nexport(starwars,\"data/starwars.csv\")\n\n\n#After exporting the data, I now have to import the data using read_csv. The instructions also states that I should assign the pathway to the object starwars.  \n\nstarwars<-read_csv(\"data/starwars.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRows: 87 Columns: 14\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (11): name, hair_color, skin_color, eye_color, sex, gender, homeworld, s...\ndbl  (3): height, mass, birth_year\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n:::\n\n\nFor the sake of the assignment I will use **read_csv** as directed but I also wanted to show you how to use rio::import to the csv file.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstarwars_csv<- import(\"data/starwars.csv\")  # comma-separated values\n\n#|echo:true\n#|eval:true\n```\n:::\n\n\nI'm going to reload the variables set above for the assignment \n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata(\"starwars\")\nexport(starwars,\"data/starwars.csv\")\nstarwars<-read_csv(\"data/starwars.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRows: 87 Columns: 14\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (11): name, hair_color, skin_color, eye_color, sex, gender, homeworld, s...\ndbl  (3): height, mass, birth_year\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n\n```{.r .cell-code}\n#|echo:true\n#|eval:true\n```\n:::\n\n\n##View the data \n\nNow that I've imported and exported the data , I would like to view it and see what is included in the data set. Using the view function I will view the data and it will output \n\nYou can view it in the console pane but I won't put it in the script because of the pop up. Instead I will provide a screenshot of the output.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(knitr)\n#When using view(starwars), it will show the data in a grid-like fashion \n\n\n\nknitr::include_graphics(\"/Users/Alexus/Desktop/Screenshot of View function.png\")\n```\n\n::: {.cell-output-display}\n![](../../../../../Screenshot of View function.png)\n:::\n\n```{.r .cell-code}\n#|echo:true\n#|eval:true\n```\n:::\n\n\n##Print \n\nPrint data should be used in the console and will print out only the first ten rows of the data. \n\n\n##Glimpse \n\nThe glimpse() function is used to show the columns as rows , this is a sideway view which is beneficial because some of the data has a lot of columns.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(starwars)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 87\nColumns: 14\n$ name       <chr> \"Luke Skywalker\", \"C-3PO\", \"R2-D2\", \"Darth Vader\", \"Leia Or…\n$ height     <dbl> 172, 167, 96, 202, 150, 178, 165, 97, 183, 182, 188, 180, 2…\n$ mass       <dbl> 77.0, 75.0, 32.0, 136.0, 49.0, 120.0, 75.0, 32.0, 84.0, 77.…\n$ hair_color <chr> \"blond\", NA, NA, \"none\", \"brown\", \"brown, grey\", \"brown\", N…\n$ skin_color <chr> \"fair\", \"gold\", \"white, blue\", \"white\", \"light\", \"light\", \"…\n$ eye_color  <chr> \"blue\", \"yellow\", \"red\", \"yellow\", \"brown\", \"blue\", \"blue\",…\n$ birth_year <dbl> 19.0, 112.0, 33.0, 41.9, 19.0, 52.0, 47.0, NA, 24.0, 57.0, …\n$ sex        <chr> \"male\", \"none\", \"none\", \"male\", \"female\", \"male\", \"female\",…\n$ gender     <chr> \"masculine\", \"masculine\", \"masculine\", \"masculine\", \"femini…\n$ homeworld  <chr> \"Tatooine\", \"Tatooine\", \"Naboo\", \"Tatooine\", \"Alderaan\", \"T…\n$ species    <chr> \"Human\", \"Droid\", \"Droid\", \"Human\", \"Human\", \"Human\", \"Huma…\n$ films      <chr> \"The Empire Strikes Back|Revenge of the Sith|Return of the …\n$ vehicles   <chr> \"Snowspeeder|Imperial Speeder Bike\", NA, NA, NA, \"Imperial …\n$ starships  <chr> \"X-wing|Imperial shuttle\", NA, NA, \"TIE Advanced x1\", NA, N…\n```\n:::\n\n```{.r .cell-code}\n#|echo:true\n#|eval:true\n```\n:::\n\n\n##Summary \n\nThe summary() function gives us an overview of the data , specifically for values such as mean , medium , maximum and so forth. This is useful for interpreting if R mistook certain values as integers.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(starwars)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     name               height           mass          hair_color       \n Length:87          Min.   : 66.0   Min.   :  15.00   Length:87         \n Class :character   1st Qu.:167.0   1st Qu.:  55.60   Class :character  \n Mode  :character   Median :180.0   Median :  79.00   Mode  :character  \n                    Mean   :174.4   Mean   :  97.31                     \n                    3rd Qu.:191.0   3rd Qu.:  84.50                     \n                    Max.   :264.0   Max.   :1358.00                     \n                    NA's   :6       NA's   :28                          \n  skin_color         eye_color           birth_year         sex           \n Length:87          Length:87          Min.   :  8.00   Length:87         \n Class :character   Class :character   1st Qu.: 35.00   Class :character  \n Mode  :character   Mode  :character   Median : 52.00   Mode  :character  \n                                       Mean   : 87.57                     \n                                       3rd Qu.: 72.00                     \n                                       Max.   :896.00                     \n                                       NA's   :44                         \n    gender           homeworld           species             films          \n Length:87          Length:87          Length:87          Length:87         \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n                                                                            \n   vehicles          starships        \n Length:87          Length:87         \n Class :character   Class :character  \n Mode  :character   Mode  :character  \n                                      \n                                      \n                                      \n                                      \n```\n:::\n\n```{.r .cell-code}\n#|echo:true\n#|eval:true\n```\n:::\n\n\n###Return back to assignment (Changing column type and graph)\n\nIn this part of the assignment, I will change the column types inside of the data. \n\n**Directions: Convert the columns  hair_color, skin_color, eye_color, sex, gender, homeworld, and species to col(factor)**\n\nFirst : I am going to use the spec function so that I can view the current variable types.\n\nSecond: Re-import the data file with the corrected variable types so that it is updated \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nspec(starwars)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ncols(\n  name = col_character(),\n  height = col_double(),\n  mass = col_double(),\n  hair_color = col_character(),\n  skin_color = col_character(),\n  eye_color = col_character(),\n  birth_year = col_double(),\n  sex = col_character(),\n  gender = col_character(),\n  homeworld = col_character(),\n  species = col_character(),\n  films = col_character(),\n  vehicles = col_character(),\n  starships = col_character()\n)\n```\n:::\n\n```{.r .cell-code}\ncorrected_cols<-cols(\n  name = col_character(),\n  height = col_double(),\n  mass = col_double(),\n  hair_color = col_factor(),\n  skin_color = col_factor(),\n  eye_color = col_factor(),\n  birth_year = col_double(),\n  sex = col_factor(),\n  gender = col_factor(),\n  homeworld = col_factor(),\n  species = col_factor(),\n  films = col_character(),\n  vehicles = col_character(),\n  starships = col_character()\n)\n\nstarwars <- read_csv(\"data/starwars.csv\", col_types = corrected_cols)\n#|echo:true\n#|eval:true\n```\n:::\n\n\n###Writing in data \n\nLastly, I will be demonstrating my knowledge of writing data by creating a table that includes my completed and missing assignments. Completing assignment has been very hard for me with personal life but it's ok .. this table will help me visually see it. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nassignments_completed<-tibble(\n  assignments = c(\"Assignment 5\", \"Assignment 6\", \"Assignment 7-9\",\"Midterm 1\"),\n  completed = c(\"completed\", \"not completed\", \"not completed\",\"not completed\"),\n)\n\nview(assignments_completed)\n\n#Below I will show a screenshot of this table \n\n#I am using file.choose() as a shortcut to find the path of my document \n\nknitr::include_graphics(\"/Users/Alexus/Desktop/Assignments completion table.png\")\n```\n\n::: {.cell-output-display}\n![](../../../../../Assignments completion table.png)\n:::\n\n```{.r .cell-code}\n#|echo:true\n#|eval:true\n```\n:::\n\n\n\n**That is all for my post today, chao!!**\n\n\n\n\n\n\n\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}