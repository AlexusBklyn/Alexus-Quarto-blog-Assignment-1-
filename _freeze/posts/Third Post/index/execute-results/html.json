{
  "hash": "287261433f4442ea78fcd8e252d159ef",
  "result": {
    "markdown": "---\ntitle: \"Third Blog Post\"\nauthor: \"Alexus Lawrence\"\ndate: \"2023-03-02\"\ncategories: [news, code, analysis]\nimage: \"image.jpg\"\nformat:\n  html:\n    toc: true\n---\n\n\n# New Qmd document \n\n1.  **Be able to make a new .qmd document**\n    -   Yes I can do this (instructions include saving it to my personal folder)\n    -   Open R studio\n    -   Open R Project and press on Data assignments 2023\n    -   Go to the file section -Create new folder with desired name ('assignment 3') -Press on the folder and then on the top left with paper + add sign icon -This should result in a qmd file, save it with the blue box icon -This exercise will be visible on my github insert simple markdown plain text\n\n------------------------------------------------------------------------\n\n# Render qmd doc\n\n2.  **Be able to render a .qmd document**\n\n-   Yes, I can render a .qmd document\n-   Go to file, open file , locate the desired qmd file that you want to have access to -Once opened , you can locate the render option next to the magnifying glass\n-   You can use the console and click on the build option & then render website\n\n------------------------------------------------------------------------\n\n# Source editor vs Visual editor view \n\n3.  **Explain the difference between the source editor view and visual editor view in Rstudio.**\n\nThe source editor and visual editor are different because source editor is for plain text while visual editor represents the output of those text .. such as dashes being \"translated\" as bullet points\n\n------------------------------------------------------------------------\n\n# Markdown plain text options\n\n4.  **Be able to insert simple markdown plain text (headers, lists, paragraphs), and render the document.**\n\n# First header\n\n## Second level header\n\nYou can make list using : \\*,-,or +\n\n**Like this**:\n\n# Grocery Fruit Store lists\n\n-   Bananas\n-   Oranges\n-   Peaches\n-   Pineapples\n-   Apples\n\nWe can also make paragraphs in r, you just simply type the text ! To get to the next sentence you just press enter but if you would like to indent the next paragraph use command I.\n\nTo render the document after, click the render button.\n\n----------------------------------------\n\n# Resources for markdown (**Includes clickable link**)\n\n5.  **Be aware of resources to help you learn more about markdown options.**\n\nThis link has available resources and tips that helps with markdown [Click Here](https://quarto.org/docs/authoring/markdown-basics.html)\n\n-----------------------\n\n# Insert chunk and display output \n\n 6. **Be able to insert an R code chunk, and show the output in the rendered document. - macro for quick insert** \n \n \n To insert an R code chunk I can use either cmd+option+I or use the +c option (green box) on the upper right hand corner\n\n------------------------\n\n# Chunks in qmd doc\n\n7.  **Running R code chunks in a qmd**\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#This is another r code chunk \n#Pressing play on an r code chunk will run that specific chunk, the play button is on the upper right hand corner \n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#Pressing Play \n\n4+2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 6\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#copy/paste into console\n```\n:::\n\n\n-   copy/paste into console\n-   highlight then command-enter (mac)\n-   precedence issues (first to last)\n\n---------------------------------------------------------------\n\n# How to use eval, message, error , warning and echo options\n\n8.  **Be aware of R code chunk options, and how to use eval, messages, error, warning, and echo.**\n\n\n::: {.cell}\n\n```{.r .cell-code}\n2+3 \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 5\n```\n:::\n:::\n\n\nThis is going to show an output but if i were to use the eval (false option), it will not show the output (**see below**)\n\n\n::: {.cell}\n\n```{.r .cell-code}\n2+3\n```\n:::\n\n\nNotice how when the eval is set to false and echo is set to true , the output is not shown but the source code is shown. Now lets try when both are set to false. (see below, **hint: you should see nothing!**)\n\n\n::: {.cell}\n\n:::\n\n\nFor the messages option , we will format it just as we did for the error and echo options. \n\nFirst let's start by trying to call a package and have the message pop up. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'dplyr'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n```\n:::\n\n```{.r .cell-code}\n#| eval: true\n#| echo: true\n```\n:::\n\n\nThe package shows a messages but if I set message to false then I wouldn't see it , **see below** \n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\n```\n:::\n\n\nWhat about if we have an error? Can we show the error without it stopping our rendering process?\n\n\nLets try to add a letter to a number  , to make it display an error \n\n\n::: {.cell}\n\n```{.r .cell-code}\n\"b\"+ 5\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in \"b\" + 5: non-numeric argument to binary operator\n```\n:::\n:::\n\n\nWhen setting the message and warning to false, it will not display in output \n\n\n-------------------------------------------------------\n\n\n# Chunk options \n\n9.  **Be able to set code chunk options per chunk, and/or for the whole document. Understand rules for precedence (which options will apply if both are set.)**\n\nExecute in yml at the top and the chunk has priority (precedence) over the global options. \n\n\n-------------------------------------------\n\n# Inline r code example \n\n10. **Write inline r code.**\n\nFor an exercise I will assign numbers to variables\n\n\n::: {.cell}\n\n```{.r .cell-code}\n\"a\"<- 2\n\"b\"<- 3\n\"c\"<- 4\n```\n:::\n\n\nI am going to call the value of b by using the back tick r and then the variable 'r b' , it will make this output \n\n\nThe value of b is 3\n\n# Difference in rendering environment and r studio environment\n\n11. **Explain how the rendering environment is different from the Rstudio environment.**\n\nThe difference between the rendering environment and the r studio environment is that the rendering environment will automatically display assigned variables, whereas the rendering environment will set a new r process. Additionally, if you were to reset r , the r studio environment will be cleared but for the rendering environment it will still be the same (**hint: This is because with render it is a separate process **)\n\n\n# html options \n\n\n12. **Be aware of more advanced quarto options for html**\n\nTo display this , I will add header by using the toc (table of contents) option so that my blog is easier to read!\n\n\nThat's all for this post !\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}