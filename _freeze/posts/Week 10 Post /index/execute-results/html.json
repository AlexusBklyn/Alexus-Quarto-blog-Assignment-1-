{
  "hash": "087804a771bd44e1d45cceccb6ff52f6",
  "result": {
    "markdown": "---\ntitle: \"Week 10 Post \"\nauthor: \"Alexus Lawrence\"\ndate: \"2023-03-29\"\ncategories: [news, code, analysis]\nimage: \"image.jpg\"\n---\n\n\nHello, Welcome to my Week 10 Blog post! \n\nIn today's post, we will be learning how to create tidy data. This is basically data that is \"messy\" and we need to \"tidy it up\"\n\nLet's go! \n\n## Set-up \n\nBefore starting the exercise, I need to load the packages needed for the exercise , in this case it will be tidyverse.\n\nThe instructions also ask that I download a copy of both csv files, \nwide-exercise-1.csv and wide_exercise-2.csv, then read in the files using read_csv , naming them wide 1/wide 2 respectively. \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#Load the package \nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.2     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.1     ✔ tibble    3.2.0\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.1     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the \u001b]8;;http://conflicted.r-lib.org/\u0007conflicted package\u001b]8;;\u0007 to force all conflicts to become errors\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Set the csv files to their object names \nwide1<-read_csv(\"/Users/Alexus/Downloads/wide_exercise-1.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRows: 50 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (1): repeat\ndbl (6): id, q1, q2, q3, q4, q5\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n\n```{.r .cell-code}\nwide2<-read_csv(\"/Users/Alexus/Downloads/wide_exercise-2.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRows: 50 Columns: 12\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (1): repeat_patient\ndbl (11): id, q1_sat, q2_sat, q3_sat, q4_sat, q5_sat, q1_rec, q2_rec, q3_rec...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n:::\n\n\n## Survey 1 \n\n### Information for survey 1 :\n\nWide 1 contains data from 50 patients and they were each asked 5 questions about experience at a health center. The results are reported through satisfaction score & calculated by mean of the five responses. The survey also records if it is their first time or a repeat patient. \n\n### Questions: \n1)How many variables should the long-form version of wide 1 have?\n2)How many observations should  the long form of wide 1 have ?\n\n### Answers: \n\n1) There will be 4 variables, I say this because when I view the wide-1 file it includes the patient id (1), then they were asked a question (2), each patient had to respond (3) and then lastly the report of whether they have been first or repeated patient(4). \n\n2)There will be 250 observations available because there are 50 patients and they were each asked 5 questions. \n\n## Tidy 1 \n\n### Tidy 1 directions: Transform wide1 to long-form using pivot_longer() and store it in an object named tidy 1. \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# I am going to use pivot_longer using the same format included in the text \n\ntidy1<-pivot_longer(  #Assign to the object \n  data = wide1,       #Data equal the data set wide 1 \n    cols = q1:q5,      # The columns satisfaction rates \n    names_to = 'question',\n    values_to=  'response')\n\n#This worked and the number of observations that I predicted was correct\n```\n:::\n\n\n## Survey 2 \n\n### Information for survey 2: \n\nWide2 has data from 50 patients as well. There are only two measures included in the questionnaire. However, similar to wide 1 there are five questions that relate to satisfaction but there are five questions regarding if they recommend the medical practice to a friend. These measures are reported by calculating the overall mean for each of the items. \n\n\n## Tidy 2a\n\nFor the first option, we’re going to treat the “satisfaction” and “recommendation” measurements as two categories of the same variable. This will be a fully long-form data set with five variables id, repeat_patient, question (the question number), category (whether it’s sat or rec), and response (the numerical rating).\n\n### Question 2a:\n\nHow many observations should the fully long-form version of wide 2 have?\n\nI believe there will be 500 observations for wide 2 data set because there are 5 variables and but for the category it mentions 2 options the satisfaction and recommendation , therefore there will be 2 of those options per each patient. \n\nMy math : 50 patients x 5 variables= 250 \n250 x 2 (the options)= 500 observations \n\n### Directions for 2a: \nTransform wide2 to full long-form using pivot_longer() and store it in an object named tidy2a.\n\nI am provided 2 hints :\n\n1)data %>% pivot_longer() %>% separate()\n2)into  = c(\"col1\", \"col2\")\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntidy2a<- wide2%>%\npivot_longer(\n      cols = q1_sat:q5_rec, #These are the columns include in the wide 2 data set \n    names_to = 'question',\n    values_to=  'response')%>%\n# In the section we have 2 different options and in the hint we have to seperate into two columns \n  \n  separate(col='question', #Separate the question in the question and category (the category has 2 / satisfaction and recommendation )\n           into=c('question','category'))\n```\n:::\n\n\n\n## Tidy 2b \n\n### Tidy2b information: The second option is to treat the satisfaction and recommendation scores as two distinct variables. This only makes sense if the satisfaction and recommendation scores for each question number are related to each other (e.g., q1 is about the same thing for both questions), making them part of the same observation.\n\nThis version should also have five variables, but it won’t be fully long-form, it’ll be a slight mix of the two that we’re going to call “semi-long”. The variables in the semi-long version will be id, repeat, question (the question number), sat (the response for the satisfaction question), and rec (the response for the recommendation question).\n\n### Question for tidy 2b:\n\nHow many observations should the semi-long version of wide 2 have?\n\nI feel like it would be 250 because the text tells us that it would be 2 distinct variables and that the question number are related to each other. In the previous question for 2a I multiplied the 2 variables (because there were 2 options) but now that they are being treated distinctively it should be half of the previous observation 250. Also , the semi-long was also a hint because it is mixing the two. \n\n\n## Creating Tidy 2b \n\n::: {.cell}\n\n```{.r .cell-code}\n# I can use the code I used for 2a and edit it accordingly\ntidy2b<- wide2%>%\npivot_longer(\n      cols = q1_sat:q5_rec, \n    names_to = 'question',\n    values_to=  'response')%>%\n\n  \n  separate(col='question', #Separate the question in the question and category (the category has 2 / satisfaction and recommendation )\n           into=c('question','category')) %>%\n  pivot_wider(names_from = 'category', #use pivot wider because it is semi-long & provides the responses more visually based on the category \n              values_from= 'response')\n```\n:::\n\n\n\n\n## Analysis and Visualization \n\n### Analysis and Visualization directions: \nUsing group_by() and summarise(), calculate the mean score for each participant for both satisfaction and recommendation. Do this for both versions of the dataset so that you can see how the structure of the dataset changes the approach you need to take.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# The first version of tidy 2 is tidy 2a so let's start with that \n\ntidy2a%>%\n  group_by(id,category)%>% # I am going to group by category and id because I need each participants score and category represents the satisfaction or recommendation \n  summarise(mean=mean(response),.groups = 'drop')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 100 × 3\n      id category  mean\n   <dbl> <chr>    <dbl>\n 1     1 rec        3.8\n 2     1 sat        1.8\n 3     2 rec        4  \n 4     2 sat        2.6\n 5     3 rec        4.8\n 6     3 sat        2.6\n 7     4 rec        4.4\n 8     4 sat        2  \n 9     5 rec        4  \n10     5 sat        2.6\n# ℹ 90 more rows\n```\n:::\n\n```{.r .cell-code}\ntidy2b%>%\n  group_by(id)%>%\n  summarise(mean_satisfaction=mean(sat),\n            rec_mean=mean(rec))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 50 × 3\n      id mean_satisfaction rec_mean\n   <dbl>             <dbl>    <dbl>\n 1     1               1.8      3.8\n 2     2               2.6      4  \n 3     3               2.6      4.8\n 4     4               2        4.4\n 5     5               2.6      4  \n 6     6               3        3.8\n 7     7               2.4      4.6\n 8     8               4        4  \n 9     9               4        4.2\n10    10               3.2      3.8\n# ℹ 40 more rows\n```\n:::\n\n```{.r .cell-code}\n# The text says two treat the variables as distinct but when i run my code the groups are still there , i'll compare my code to Professor Crump's to see where I am going wrong \n\n# I  couldn't find anything so I used the text and they used .groups=drop to separate the variables, so i'm going to do that and see if it works for me. \n```\n:::\n\n\nNow this looks better because before the groups were still existent. Also the number of observations matched my expectation. \n\n## Plot 1\n\nI am asked to reproduce this graph (below), which is demonstrating the relationship between satisfaction and recommendation scores, by whether the patient is a repeat patient. \n\nI am provided with this hint: geom_jitter() which is for point position. \n\nThis should be easy because I have created scatter plots in the past. \n\nknitr::include_graphics(\"img/rmarkdown_hex. png\") \n\n\n::: {.cell}\n\n```{.r .cell-code}\nknitr::include_graphics(\"/Users/Alexus/Desktop/Scatter (plot 1 ).png\")\n```\n\n::: {.cell-output-display}\n![](../../../../../Scatter (plot 1 ).png)\n:::\n:::\n\nLet's go !\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntidy2b_scatter <- ggplot(tidy2b, aes(x = sat, y = rec,\n                   colour = repeat_patient)) +\n  geom_jitter() +\n  #tidy 2b includes the satisfaction information and the repetition of the patient \n       \n  geom_smooth(method = \"lm\") +\n  \n  ggtitle(\"Satisfaction and recommendation scores \")\n#lm is the method because it is a y and x relationship \n\n\n  tidy2b_scatter\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`geom_smooth()` using formula = 'y ~ x'\n```\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\n## Plot 2 \n\nThe next plot that I need to recreate is below. \n\nThis box plot represents showing satisfaction and recommendation separately \n\n\n::: {.cell}\n\n```{.r .cell-code}\nknitr::include_graphics(\"/Users/Alexus/Desktop/box plot .png\")\n```\n\n::: {.cell-output-display}\n![](../../../../../box plot .png)\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntidy2a_box<-ggplot(tidy2a, #using this data frame because it includes the information that I need \n      aes(x = repeat_patient, y = response, fill = repeat_patient)) +\n  geom_boxplot() +\n  facet_wrap(~category)+\ntheme_bw() +\n  #I googled how to fill in the color of a box plot and I found a function called scale_fill_brewer which gives you a specific shade of colors, included are a dark orange and dark green , so i am going to use dark2 but there are a variety of colors if you look it up. I wanted to learn how to fill it in manually or separately but I found that if you do it manually both boxes will be the same color. \n  scale_fill_brewer(palette = \"Dark2\")\n  \ntidy2a_box\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\n## Plot 3 \n\nThe last Plot will be demonstrating the response across all questions and categories \n\n\n::: {.cell}\n\n```{.r .cell-code}\nknitr::include_graphics(\"/Users/Alexus/Desktop/histogram (plot 3 ) .png\")\n```\n\n::: {.cell-output-display}\n![](../../../../../histogram (plot 3 ) .png)\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nhisto_tidy2<- ggplot(tidy2a, \n       aes(x = response)) +\n  geom_histogram(fill = 'grey', binwidth = 1, colour= \"black\" ) +\n  xlab(\"Responses across all question and categories\") +\n  theme_bw()\nhisto_tidy2\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# I do not need a y value because its for all responses\n# I need the bars to be closer together so I should add binwidth as suggested by r \n#When I add the bin width the bars are closed together the lines are non existent , I'm going to add the colour as suggested \n```\n:::\n\n\nThat looks good , that is all for my week assignment 10 , see you in the next post!\n\n\n\n\n\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}