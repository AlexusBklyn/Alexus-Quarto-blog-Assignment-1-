{
  "hash": "f3e247cd5d46073d6525ef9e1b8d9cf6",
  "result": {
    "markdown": "---\ntitle: \"Week 6 Data Summaries \"\nauthor: \"Alexus Lawrence\"\ndate: \"2023-04-13\"\ncategories: [news, code, analysis]\nimage: \"image.jpg\"\n---\n\n\n**Hello, welcome to my new blog post**\n\nIn this post I will be explaining to you the main topics included in week 6. These topics include summarizing data , using in-line coding, max/mean/min and so much more! Let's get into it!\n\n## 5.1 Set-Up\n\nThe first step before starting this exercise is to load the necessary packages.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)   # data wrangling functions\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.0     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.1     ✔ tibble    3.2.0\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.1     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the \u001b]8;;http://conflicted.r-lib.org/\u0007conflicted package\u001b]8;;\u0007 to force all conflicts to become errors\n```\n:::\n\n```{.r .cell-code}\nlibrary(rtweet)      # for searching tweets\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'rtweet'\n\nThe following object is masked from 'package:purrr':\n\n    flatten\n```\n:::\n\n```{.r .cell-code}\nlibrary(kableExtra)  # for nice tables\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'kableExtra'\n\nThe following object is masked from 'package:dplyr':\n\n    group_rows\n```\n:::\n:::\n\n\n## 5.2.1 R-objects\n\nThe next step in this set-up is to download the data and save it into the directory. Load the data after that using the readRS function.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntweets<- readRDS(file = \"/Users/Alexus/Downloads/ncod_tweets.rds\")\n```\n:::\n\n\nBefore I do anything with the data , I want to view the data and what it consist of using the glimpse() function.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(tweets)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(tweets)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 90\n  user_id       statu…¹ created_at          scree…² text  source displ…³ reply…⁴\n  <chr>         <chr>   <dttm>              <chr>   <chr> <chr>    <dbl> <chr>  \n1 140740738414… 144801… 2021-10-12 20:12:27 Seanac… \"#LG… Twitt…     139 <NA>   \n2 986008595622… 144801… 2021-10-12 20:11:52 _blayn… \"Hus… Twitt…      52 <NA>   \n3 895105557048… 144801… 2021-10-12 20:11:40 ShiguS… \"Wel… Twitt…      72 <NA>   \n4 114895848585… 144801… 2021-10-12 20:11:26 M_L_Ja… \"My … Twitt…     179 <NA>   \n5 142997672889… 144801… 2021-10-12 20:11:17 LoboWo… \"#Ca… Twitt…     243 <NA>   \n6 4730258930    144801… 2021-10-12 20:10:59 LogixTM \"If … Twitt…     196 <NA>   \n# … with 82 more variables: reply_to_user_id <chr>, reply_to_screen_name <chr>,\n#   is_quote <lgl>, is_retweet <lgl>, favorite_count <int>,\n#   retweet_count <int>, quote_count <int>, reply_count <int>, hashtags <list>,\n#   symbols <list>, urls_url <list>, urls_t.co <list>,\n#   urls_expanded_url <list>, media_url <list>, media_t.co <list>,\n#   media_expanded_url <list>, media_type <list>, ext_media_url <list>,\n#   ext_media_t.co <list>, ext_media_expanded_url <list>, …\n```\n:::\n:::\n\n\n## 5.3 summarise\n\nSummarise() is a function in r that allows you to calculate things such as the mean, median and much more! Lets try to calculate the mean, median, min and max of the re-tweet count\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#assign it to a variable , use summarise()function\nretweet_summary <- summarise(tweets, \n                           mean_retweet = mean(retweet_count),\n                           median_retweet = median(retweet_count),\n                           min_retweet = min(retweet_count),\n                           max_retweet = max(retweet_count))\n```\n:::\n\n\nWe can then print out the what we just assigned utilizing kable\n\n\n::: {.cell}\n\n```{.r .cell-code}\nknitr::kable(retweet_summary) \n```\n\n::: {.cell-output-display}\n`````{=html}\n<table>\n <thead>\n  <tr>\n   <th style=\"text-align:right;\"> mean_retweet </th>\n   <th style=\"text-align:right;\"> median_retweet </th>\n   <th style=\"text-align:right;\"> min_retweet </th>\n   <th style=\"text-align:right;\"> max_retweet </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:right;\"> 3.166632 </td>\n   <td style=\"text-align:right;\"> 0 </td>\n   <td style=\"text-align:right;\"> 0 </td>\n   <td style=\"text-align:right;\"> 2525 </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n\nWe can find different values of the data , such as the standard deviations of the data .\n\n\n::: {.cell}\n\n```{.r .cell-code}\nretweet_summary <- summarise(tweets, \n                           mean_retweet = mean(retweet_count),\n                           median_retweet = median(retweet_count),\n                           min_retweet = min(retweet_count),\n                           max_retweet = max(retweet_count),\n                           sd_retweet= sd(retweet_count)\n                            )\n```\n:::\n\n\nLet's print this out using the kable function again to see the new table\n\n\n::: {.cell}\n\n```{.r .cell-code}\nknitr::kable(retweet_summary) \n```\n\n::: {.cell-output-display}\n`````{=html}\n<table>\n <thead>\n  <tr>\n   <th style=\"text-align:right;\"> mean_retweet </th>\n   <th style=\"text-align:right;\"> median_retweet </th>\n   <th style=\"text-align:right;\"> min_retweet </th>\n   <th style=\"text-align:right;\"> max_retweet </th>\n   <th style=\"text-align:right;\"> sd_retweet </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:right;\"> 3.166632 </td>\n   <td style=\"text-align:right;\"> 0 </td>\n   <td style=\"text-align:right;\"> 0 </td>\n   <td style=\"text-align:right;\"> 2525 </td>\n   <td style=\"text-align:right;\"> 35.8742 </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n\nWe can now try plotting a histogram using the data in the textbook but with my spin to it of course !\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(tweets, aes(x = retweet_count)) + #y-value was not included so that the counts can be automatic (hint: look at the \"y-value\" of the graph)\n  geom_histogram(bins = 25) + \n  scale_x_continuous(trans = \"pseudo_log\", \n                     breaks = c(0, 1, 10, 100, 1000, 10000)) #for the breaks of the graph (to separate the counts )\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\nThe textbook also mentions that we could add extra functions inside of the summarise() such as **n** which counts the number of rows for a specific column (view below) and also the dates they were created.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nretweet_summary <- tweets %>%\n  summarise(mean_retweet = mean(retweet_count),\n            median_retweet= quantile(retweet_count, .5),\n            n = n(),\n            min_date = min(created_at),\n            max_date = max(created_at))\n```\n:::\n\n\nNow let's put the retweet summary in a table again to see what it looks like now !\n\n\n::: {.cell}\n\n```{.r .cell-code}\nknitr::kable(retweet_summary) \n```\n\n::: {.cell-output-display}\n`````{=html}\n<table>\n <thead>\n  <tr>\n   <th style=\"text-align:right;\"> mean_retweet </th>\n   <th style=\"text-align:right;\"> median_retweet </th>\n   <th style=\"text-align:right;\"> n </th>\n   <th style=\"text-align:left;\"> min_date </th>\n   <th style=\"text-align:left;\"> max_date </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:right;\"> 3.166632 </td>\n   <td style=\"text-align:right;\"> 0 </td>\n   <td style=\"text-align:right;\"> 28626 </td>\n   <td style=\"text-align:left;\"> 2021-10-10 00:10:02 </td>\n   <td style=\"text-align:left;\"> 2021-10-12 20:12:27 </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n\nOOH that looks a little messy , lets try to view it using the glimpse function so that we get an idea of how the data looks.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(retweet_summary)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 1\nColumns: 5\n$ mean_retweet   <dbl> 3.166632\n$ median_retweet <dbl> 0\n$ n              <int> 28626\n$ min_date       <dttm> 2021-10-10 00:10:02\n$ max_date       <dttm> 2021-10-12 20:12:27\n```\n:::\n:::\n\n\n## 5.3.1 \\$ Operator\n\nThe \\$ operator is used when wanting to selecting specific columns from a data set\n\nLets try to find select the column of source from the tweets data file.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntweets$source\n```\n:::\n\n\nAs you can see , it gives you all the entries for that specific column\n\nNow let's try from the retweet_summary data set that I created\n\n\n::: {.cell}\n\n```{.r .cell-code}\nretweet_summary$min_date\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"2021-10-10 00:10:02 UTC\"\n```\n:::\n\n```{.r .cell-code}\nretweet_summary$max_date\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"2021-10-12 20:12:27 UTC\"\n```\n:::\n:::\n\n\nWait but what if I wanted only a specific entry from that column?\n\nThat is where the use of brackets are important\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntweets$screen_name[7]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"PankajK03650424\"\n```\n:::\n:::\n\n\nAs you can see I requested for the 7th screen name of the column and was able to get it without the print out of the other values.\n\n## 5.3.2 Pipes\n\nIn this section we will speak about pipes , this is a function that allows you to do one output and then the next. In the textbook, the author describes pipes as a \"and then\" function meaning do this then this.\n\nFor example let's ask R to show me the mean of the retweet count \"and then\" show me the median of it.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#Assign it to a variable, make it easier for me to call\nquoted_retweet<-tweets %>% #I used tweets on the left side b/c that is the data frame that I am selecting it from\n  summarise(mean_quoted_retweet = mean(quoted_retweet_count), #I am going to summarise it \n            median_quoted_retweet= median(quoted_retweet_count))\n```\n:::\n\n\nNow let's view it using the glimpse() function\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(quoted_retweet)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 1\nColumns: 2\n$ mean_quoted_retweet   <dbl> NA\n$ median_quoted_retweet <int> NA\n```\n:::\n:::\n\n\nIt is showing NA because there isn't enough values to make a median or mean.\n\n## 5.3.3 Inline Coding\n\nInline coding is used when you want to make a statement about your data set using coding inside of the sentence. I know this is confusing , allow me to demonstrate.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#First we will write the in line coding for the dates of the retweets\nretweet_from<-retweet_summary$min_date %>% #assign to variable so easier to use in sentence \n   format(\"%d %B, %Y\") #Using format to give us the date organized by date,month,year\nretweet_to<-retweet_summary$max_date %>%\n  format(\"%d %B, %Y\")\n```\n:::\n\n\nNow that the code is in , lets put it in a sentence :\n\nThere were 28626 re-tweets between 10 October, 2021 and 12 October, 2021.\n\nTo see the output of this you can use the control shift k (on mac) to knit the document.\n\n## 5.4 Counting\n\nCounting is a function that can be used to count categorical data , this is efficient because it helps you know the number of non-numerical items.\n\nFor example, if I wanted to know the amount of android users and Iphone users in the data , I can use this code below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#sum is used to give me a total \nsum(stringr::str_count(tweets$source, pattern = \"Twitter for iPhone\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 13634\n```\n:::\n\n```{.r .cell-code}\nsum(stringr::str_count(tweets$source, pattern = \"Twitter for Android\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 5878\n```\n:::\n:::\n\n\nI can also produce a simpler example that shows the screen name of individuals with the number of re-tweets.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nretweets_per_user <- tweets %>%\n  count(screen_name,retweet_count, sort = TRUE)\n\nhead(retweets_per_user)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 3\n  screen_name     retweet_count     n\n  <chr>                   <int> <int>\n1 interest_outfit             0    34\n2 NRArchway                   0    29\n3 dr_stack                    1    27\n4 IAmRocWitChevy1             1    22\n5 KatieZakrzewsk1             0    20\n6 Heyyitsju5tin               0    19\n```\n:::\n:::\n\n\n# Inline coding part 2\n\nIn this part of inline coding we are going to use nrow, pull and slice.\n\n**nrow:** is used to count number of rows in a data set **slice:** is used for a specific row of data **pull** is used to select a specific variable\n\nLet me show you how to use this !\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntweeters <- nrow(retweets_per_user)\nbest_tweeter <- slice(retweets_per_user, 1) %>% \n  pull(screen_name)\nbest_tweeter_n <- slice(retweets_per_user, 1) %>% \n  pull(n)\n```\n:::\n\n\nThere were 26426 unique accounts tweeting about #NationalComingOutDay. interest_outfit was the most prolific tweeter, with 34 tweets.\n\n## Grouping\n\nThe grouping function is used to group data by a variable from the data set For example, in this example we view the verified users and the number of retweets.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntweets_grouped <- tweets %>% #assign to variable\n  group_by(verified)\n\nverified <- tweets_grouped %>%\n  summarise(count = n(),\n            mean_retweets = mean(retweet_count)) %>%\n  ungroup()\n\nverified\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 3\n  verified count mean_retweets\n  <lgl>    <int>         <dbl>\n1 FALSE    26676          1.83\n2 TRUE      1950         21.5 \n```\n:::\n:::\n\n\n## Data Nyc Exercise\n\nThis Data NYC exercise is to show a deeper understanding of the chapter using data outside of the textbook. This data will be taken from [Data NYC Website](https://opendata.cityofnewyork.us).\n\nProfessor instructed me to obtain, import, summarize, and plot data.\n\nNYC School Inspection Data\n\n<https://data.cityofnewyork.us/Health/DOHMH-School-Cafeteria-inspections-2020-Present-/5ery-qagt/explore>\n\n\n\n## Import Data NYC\n\nImport the inspection data usin rio\nDOHMH_School_Cafeteria_inspections__2020_-_Present_.csv\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninspection_nyc<-read.csv(\"/Users/Alexus/Downloads/DOHMH_School_Cafeteria_inspections__2020_-_Present_.csv\")\n```\n:::\n\n\n## Summarise inspection data \n\nNext, I am going to summarize the data but first I want to view what is included in the data, to do this I am going to use the glimpse() function.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(inspection_nyc)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 11,093\nColumns: 25\n$ Record.ID            <chr> \"40542839\", \"40736086\", \"40542116\", \"40542900\", \"…\n$ SchoolName           <chr> \"P.S. 127 MCKINLEY PARK, RALPH A. FABRIZIO SCHOOL…\n$ Number               <chr> \"7805\", \"141315\", \"684\", \"1300\", \"34\", \"5400\", \"2…\n$ Street               <chr> \"7 AVENUE\", \"45 STREET\", \"LINDEN BOULEVARD\", \"BOY…\n$ City                 <chr> \"Brooklyn\", \"BROOKLYN\", \"Brooklyn\", \"Bronx\", \"New…\n$ State                <chr> \"NY\", \"NY\", \"NY\", \"NY\", \"NY\", \"NY\", \"NY\", \"NY\", \"…\n$ Borough              <chr> \"Brooklyn\", \"Brooklyn\", \"Brooklyn\", \"Bronx\", \"Man…\n$ ZipCode              <int> 11228, NA, 11203, 10472, 10026, 11203, 11693, 112…\n$ LastInspection       <chr> \"2/2/23\", \"2/15/23\", \"1/23/23\", \"3/9/23\", \"1/31/2…\n$ Permittee            <chr> \"NEW YORK CITY DEPARTMENT OF EDUCATION\", \"CONGREG…\n$ InspectionDate       <chr> \"7/28/22\", \"3/1/22\", \"11/17/22\", \"3/9/23\", \"8/1/2…\n$ PTET                 <int> 2530, 2533, 2530, 2530, 2530, 2530, 2530, 2529, 2…\n$ Site.Type            <chr> \"FSE (Public School Cafeteria)\", \"FSE (Private Sc…\n$ Level                <chr> \"\", \"G\", \"C\", \"C\", \"C\", \"C\", \"G\", \"\", \"\", \"C\", \"\"…\n$ Code                 <chr> \"\", \"10A\", \"04A\", \"04L\", \"04M\", \"04L\", \"10F\", \"\",…\n$ ViolationDescription <chr> \"\", \"Toilet facility not maintained and provided …\n$ LATITUDE             <dbl> 40.62413, 0.00000, 40.65363, 40.83159, 40.80246, …\n$ LONGITUDE            <dbl> -74.01883, 0.00000, -73.93311, -73.87891, -73.946…\n$ COMMUNITYBOARD       <int> 310, NA, 317, 209, 110, 317, 414, 303, 414, 412, …\n$ COUNCILDISTRICT      <int> 43, NA, 41, 18, 9, 45, 31, 36, 31, 27, 13, 27, 38…\n$ CENSUSTRACT          <int> 20600, NA, 87000, 5600, 19000, 94600, 94202, 2830…\n$ BIN                  <int> 3150481, NA, 3102005, 2027459, 1051434, 3104513, …\n$ BBL                  <dbl> 3059730001, 3, 3046730001, 2038640001, 1016010001…\n$ NTA                  <chr> \"BK30\", \"\", \"BK91\", \"BX08\", \"MN11\", \"BK96\", \"QN12…\n$ BOROCODE             <int> 3, 3, 3, 2, 1, 3, 4, 3, 4, 4, 2, 4, 3, 3, 3, 5, 4…\n```\n:::\n:::\n\n\n# Directions for Data NYC \n\nThis blog post is pretty lengthy so I am going to make this exercise pretty simple. For this data set I will be making a statement about the time frame of the inspections using inline coding; Then , I will make a graph counting the number of inspections per city.\n\n**Dates Inspection **\n\nI will find out the dates of the inspection using format and piping.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nData_inspectionsummary<- inspection_nyc %>%\n  summarise(min_inspectiondate = min(InspectionDate),\n            max_inspectiondate = max(InspectionDate))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nData_inspectionsummary$min_inspectiondate\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"1/10/22\"\n```\n:::\n\n```{.r .cell-code}\nData_inspectionsummary$max_inspectiondate\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"9/9/22\"\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ninspection_from<-Data_inspectionsummary$max_inspectiondate \ninspection_to<-Data_inspectionsummary$max_inspectiondate\n```\n:::\n\n\nNow that the code is in , lets put it in a sentence :\n\nThere inspections took place from  between 9/9/22 and 9/9/22.\n\n\n# Coubt of inspection by city \n\n\n::: {.cell}\n\n```{.r .cell-code}\ninspection_per_city <- inspection_nyc %>%\n  count(Borough, sort = TRUE)\n\nhead(inspection_per_city)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n        Borough    n\n1      Brooklyn 4699\n2        Queens 2250\n3     Manhattan 1886\n4         Bronx 1809\n5 Staten Island  449\n```\n:::\n:::\n\n# Pie Chart of Data\n\n\n::: {.cell}\n\n```{.r .cell-code}\nslices <- c(4699, 2250,1886, 16, 8)\nlbls <- c(\"Brooklyn\", \"Queens\", \"Manhattan\", \"Bronx\", \"Staten Island\")\npie(slices, labels = lbls, main=\"Pie Chart of Inspections by City\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-29-1.png){width=672}\n:::\n:::\n\n\n# Interpretation of graph\nAs you can see in this pie chart and from the data frame that I created above , Brooklyn  had the most inspections.\n\nOkay, that is all for this post!",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}